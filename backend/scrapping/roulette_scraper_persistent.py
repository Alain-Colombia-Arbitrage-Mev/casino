#!/usr/bin/env python3
"""
Scraper de Lightning Roulette con sesi√≥n persistente - SIN LOGIN REPETIDO
"""

import time
import json
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv

# Importar las clases sincronizadas
from database_sync import SyncedRouletteDatabase, log_message, get_number_color

# URLs y credenciales
LOGIN_URL = os.getenv("LOGIN_URL", "https://www.iamonstro.com.br/sistema/index.php")
DASHBOARD_URL = os.getenv("DASHBOARD_URL", "https://www.iamonstro.com.br/sistema/dashboard.php?mesa=Lightning%20Roulette")
USERNAME = os.getenv("ROULETTE_USERNAME", "tu_usuario")
PASSWORD = os.getenv("ROULETTE_PASSWORD", "tu_password")

# Cargar variables de entorno
load_dotenv()

REFRESH_INTERVAL = int(os.getenv("REFRESH_INTERVAL", "10"))

class PersistentRouletteScraper:
    """Scraper con sesi√≥n persistente para evitar logins repetidos"""
    
    def __init__(self):
        self.driver = None
        self.db_handler = SyncedRouletteDatabase()
        self.last_number = None
        self.consecutive_errors = 0
        self.login_attempts = 0
        
    def setup_session(self):
        """Configurar la sesi√≥n persistente una sola vez"""
        log_message("üîß Configurando sesi√≥n persistente...")
        
        try:
            # Setup driver
            self.driver = self.setup_chrome_driver()
            
            # Login proceso
            self.driver.get(LOGIN_URL)
            time.sleep(2)
            
            # Login fields
            wait = WebDriverWait(self.driver, 10)
            email_field = wait.until(EC.presence_of_element_located((By.NAME, "email")))
            email_field.clear()
            email_field.send_keys(USERNAME)
            
            password_field = self.driver.find_element(By.NAME, "senha")
            password_field.clear()
            password_field.send_keys(PASSWORD)
            password_field.send_keys(Keys.RETURN)
            
            time.sleep(3)
            
            # Navigate to dashboard
            self.driver.get(DASHBOARD_URL)
            time.sleep(2)
            
            log_message("‚úÖ Sesi√≥n persistente configurada exitosamente")
            return True
            
        except Exception as e:
            log_message(f"‚ùå Error configurando sesi√≥n: {e}", "ERROR")
            if self.driver:
                self.driver.quit()
                self.driver = None
            return False
    
    def extract_numbers_fast(self):
        """Extraer n√∫meros usando la sesi√≥n persistente (SIN LOGIN)"""
        if not self.driver:
            return []
        
        try:
            # Solo refresh de la p√°gina actual
            self.driver.refresh()
            time.sleep(1.5)  # Tiempo m√≠nimo
            
            # Extract numbers
            numbers = self.driver.execute_script("""
            var table = document.querySelector("table");
            if (!table) return [];
            
            var rows = table.querySelectorAll("tr");
            var numbers = [];
            
            for (var i = 0; i < rows.length; i++) {
                var cells = rows[i].querySelectorAll("td");
                if (cells.length > 0) {
                    var text = cells[0].textContent.trim();
                    if (text && !isNaN(text)) {
                        numbers.push(text);
                    }
                }
            }
            
            return numbers.reverse();  // Newest first
            """)
            
            if numbers and len(numbers) > 0:
                log_message(f"‚ö° Extracci√≥n r√°pida: {len(numbers)} n√∫meros. M√°s reciente: {numbers[0]}")
                return numbers
            else:
                log_message("‚ö†Ô∏è No se encontraron n√∫meros en extracci√≥n r√°pida")
                return []
                
        except Exception as e:
            log_message(f"‚ùå Error en extracci√≥n r√°pida: {e}", "ERROR")
            return []
    
    def save_to_databases(self, numbers):
        """Guardar n√∫meros en las bases de datos"""
        if not numbers:
            return False, False
        
        log_message("üì§ Guardando en bases de datos...")
        
        # Redis
        redis_success = self.db_handler.save_to_redis(numbers)
        
        # PostgreSQL
        postgres_success = self.db_handler.save_to_postgres(numbers)
        
        return redis_success, postgres_success
    
    def run(self):
        """Ejecutar el scraper con sesi√≥n persistente"""
        log_message("üöÄ SCRAPER CON SESI√ìN PERSISTENTE")
        log_message("‚ú® Modo: Sin login repetido - Ultra r√°pido")
        
        try:
            # Setup inicial de sesi√≥n
            if not self.setup_session():
                log_message("‚ùå No se pudo configurar la sesi√≥n inicial")
                return
            
            # Main loop
            while True:
                try:
                    log_message("‚ö° Extracci√≥n r√°pida (sin login)...")
                    
                    # Extraer n√∫meros usando sesi√≥n persistente
                    numbers = self.extract_numbers_fast()
                    
                    if not numbers:
                        self.consecutive_errors += 1
                        log_message(f"‚ùå Sin n√∫meros. Errores consecutivos: {self.consecutive_errors}")
                        
                        # Si hay muchos errores, reconfigurar sesi√≥n
                        if self.consecutive_errors >= 3:
                            log_message("üîÑ Reconfiguraci√≥n de sesi√≥n...")
                            if self.driver:
                                self.driver.quit()
                            if self.setup_session():
                                self.consecutive_errors = 0
                            else:
                                log_message("‚ùå Error reconfiguraci√≥n. Pausa larga...")
                                time.sleep(30)
                        else:
                            time.sleep(REFRESH_INTERVAL)
                        continue
                    
                    self.consecutive_errors = 0  # Reset error count
                    
                    # Guardar en JSON
                    save_numbers_to_json(numbers)
                    
                    # Verificar n√∫meros nuevos
                    current_number = numbers[0]
                    log_message(f"üî¢ N√∫mero actual: {current_number}")
                    
                    if current_number == self.last_number:
                        log_message(f"‚è∏Ô∏è Mismo n√∫mero ({current_number}). Esperando cambio...")
                        time.sleep(REFRESH_INTERVAL)
                        continue
                    
                    # ¬°N√öMERO NUEVO!
                    log_message(f"üÜï ¬°CAMBIO DETECTADO! {self.last_number} ‚Üí {current_number}")
                    
                    # Determinar n√∫meros a enviar
                    if self.last_number is None:
                        # Primera ejecuci√≥n
                        numbers_to_send = numbers[:3]
                        log_message(f"üéØ Primera ejecuci√≥n: {numbers_to_send}")
                    else:
                        # Solo el nuevo n√∫mero
                        numbers_to_send = [current_number]
                        log_message(f"üéØ Enviando nuevo: {numbers_to_send}")
                    
                    # GUARDAR EN BASES DE DATOS
                    redis_success, postgres_success = self.save_to_databases(numbers_to_send)
                    
                    # Resultados
                    if redis_success or postgres_success:
                        log_message(f"‚úÖ ¬°GUARDADO EXITOSO! {len(numbers_to_send)} n√∫meros")
                        log_message(f"   Redis: {'‚úÖ' if redis_success else '‚ùå'}")
                        log_message(f"   PostgreSQL: {'‚úÖ' if postgres_success else '‚ùå'}")
                    else:
                        log_message("‚ùå Error guardando en ambas bases de datos")
                    
                    # Actualizar √∫ltimo n√∫mero
                    self.last_number = current_number
                    
                    # Pausa corta
                    log_message(f"‚è∞ Pausa de {REFRESH_INTERVAL}s...")
                    time.sleep(REFRESH_INTERVAL)
                    
                except KeyboardInterrupt:
                    log_message("üõë Detenido por usuario")
                    break
                except Exception as e:
                    self.consecutive_errors += 1
                    log_message(f"‚ùå Error en bucle: {e}")
                    log_message(f"‚è≥ Pausa de 10s... (errores: {self.consecutive_errors})")
                    time.sleep(10)
        
        finally:
            if self.driver:
                self.driver.quit()
            self.db_handler.close_connections()
            log_message("üîå Sesi√≥n cerrada")

def main():
    """Funci√≥n principal"""
    scraper = PersistentRouletteScraper()
    scraper.run()

if __name__ == "__main__":
    main() 