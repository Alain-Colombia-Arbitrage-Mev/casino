import pyautogui
import time
import random
import logging
import threading
import keyboard
import json
import os
import sys
import tempfile
from PIL import Image, ImageGrab
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Intentar importar win32gui, pero continuar sin √©l si no est√° disponible
try:
    import win32gui
    import win32con
    WIN32_AVAILABLE = True
except ImportError:
    WIN32_AVAILABLE = False
    print("‚ö†Ô∏è win32gui no disponible. Algunas funciones de ventana estar√°n limitadas.")

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("roulette_bot.log", encoding='utf-8'), 
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("CasinoBotLogger")

# Configurar el handler de consola para usar UTF-8
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)

# Configurar encoding para Windows
import sys
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

class CasinoBot:
    def __init__(self):
        """Inicializa el CasinoBot"""
        # Configuraci√≥n de archivos
        self.config_file = os.path.join(os.path.dirname(__file__), 'casino_bot_config.json')
        self.current_profile = "bcgame"  # BC Game es el perfil por defecto
        self.profiles = {}
        self.positions_memory = {}
        
        # Estado del bot
        self.is_running = False
        self.target_position = None
        self.click_thread = None
        self.current_window = None
        self.driver = None
        
        # Sistema de perfiles mejorado
        self.config = self.load_config_safe()
        self.positions_validation = {}
        
        # NUEVA: Configuraciones de velocidad extrema
        self.speed_mode = "ultra"  # CAMBIO: Empezar en modo ULTRA por defecto
        self.speed_configs = {
            "normal": {
                "pre_delay": (0.1, 0.3),
                "post_delay": (0.1, 0.4),
                "hold_time": (0.05, 0.15),
                "move_duration": (0.1, 0.3),
                "between_clicks": (1.0, 3.0)
            },
            "fast": {
                "pre_delay": (0.001, 0.01),  # M√ÅS R√ÅPIDO
                "post_delay": (0.001, 0.02),  # M√ÅS R√ÅPIDO
                "hold_time": (0.001, 0.01),  # M√ÅS R√ÅPIDO
                "move_duration": (0.001, 0.02),  # M√ÅS R√ÅPIDO
                "between_clicks": (0.05, 0.2)  # M√ÅS R√ÅPIDO
            },
            "ultra": {
                "pre_delay": (0.0, 0.005),  # ULTRA R√ÅPIDO
                "post_delay": (0.0, 0.005),  # ULTRA R√ÅPIDO
                "hold_time": (0.0, 0.005),  # ULTRA R√ÅPIDO
                "move_duration": (0.0, 0.01),  # ULTRA R√ÅPIDO
                "between_clicks": (0.01, 0.05)  # ULTRA R√ÅPIDO
            },
            "lightning": {
                "pre_delay": (0.0, 0.001),  # INSTANT√ÅNEO
                "post_delay": (0.0, 0.001),  # INSTANT√ÅNEO
                "hold_time": (0.0, 0.001),  # INSTANT√ÅNEO
                "move_duration": (0.0, 0.001),  # INSTANT√ÅNEO
                "between_clicks": (0.001, 0.01)  # INSTANT√ÅNEO
            }
        }
        
        # Modo turbo mejorado - ACTIVADO por defecto
        self.turbo_mode = True  # CAMBIO: Activar turbo por defecto
        self.ultra_fast_mode = False
        self.lightning_mode = False
        
        # Para apuestas continuas r√°pidas
        self.continuous_mode = False
        self.favorite_numbers = []
        self.exit_requested = False  # Control de salida del bot
        
        # Patrones de click adaptables
        self.init_click_patterns()
        
        # Configurar hotkeys
        self.setup_hotkeys()
        
        logger.info("üé∞ BC GAME BOT INICIALIZADO - VERSI√ìN VELOCIDAD EXTREMA")
        logger.info(f"üìÇ Perfil actual: {self.current_profile}")
        logger.info(f"‚ö° Velocidad: {self.speed_mode.upper()}")
        
        # Para detectar autom√°ticamente la ventana del navegador
        self.auto_detect_window()
        
        # Configurar pyautogui para m√°xima velocidad
        self.setup_pyautogui()

    def load_config_safe(self):
        """Carga la configuraci√≥n de forma segura con m√∫ltiples intentos"""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                if os.path.exists(self.config_file):
                    # Verificar que el archivo no est√© vac√≠o
                    if os.path.getsize(self.config_file) == 0:
                        logger.warning(f"Archivo de configuraci√≥n vac√≠o en intento {attempt + 1}")
                        self.create_default_config()
                        continue
                    
                    # Intentar leer el archivo
                    with open(self.config_file, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                        
                        if not content:
                            logger.warning(f"Contenido vac√≠o en intento {attempt + 1}")
                            self.create_default_config()
                            continue
                        
                        # Parsear JSON
                        data = json.loads(content)
                        
                        # Validar estructura
                        if not isinstance(data, dict):
                            logger.warning(f"Estructura JSON inv√°lida en intento {attempt + 1}")
                            self.create_default_config()
                            continue
                        
                        # Cargar datos con compatibilidad
                        self.profiles = data.get("profiles", {})
                        
                        # Compatibilidad con versiones anteriores - IMPORTANTE para no perder coordenadas
                        old_game_profiles = data.get("game_profiles", {})
                        if old_game_profiles and not self.profiles:
                            self.profiles = old_game_profiles
                            logger.info("üîÑ Migrando desde game_profiles a profiles")
                        
                        # Compatibilidad con posiciones sueltas
                        old_positions = data.get("positions", {})
                        if old_positions and not self.profiles:
                            self.profiles["Default"] = {"positions": old_positions}
                        
                        # Cargar √∫ltimo perfil usado
                        last_profile = data.get("last_profile", None)
                        if last_profile and last_profile in self.profiles:
                            self.current_profile = last_profile
                            self.positions_memory = self.profiles[last_profile].get("positions", {})
                            # Cargar n√∫meros favoritos si existen
                            self.favorite_numbers = self.profiles[last_profile].get("favorites", [])
                        elif self.profiles:
                            self.current_profile = list(self.profiles.keys())[0]
                            self.positions_memory = self.profiles[self.current_profile].get("positions", {})
                            self.favorite_numbers = self.profiles[self.current_profile].get("favorites", [])
                        else:
                            self.current_profile = "Default"
                            self.profiles[self.current_profile] = {"positions": {}, "favorites": []}
                            self.positions_memory = {}
                            self.favorite_numbers = []
                        
                        logger.info(f"‚úÖ Configuraci√≥n cargada exitosamente: {len(self.profiles)} perfiles")
                        logger.info(f"üìÅ Perfil actual: {self.current_profile}")
                        logger.info(f"üìç Posiciones en perfil: {len(self.positions_memory)}")
                        return self.profiles
                        
                else:
                    logger.info("üìÑ No se encontr√≥ archivo de configuraci√≥n. Creando uno nuevo...")
                    self.create_default_config()
                    return
                    
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error JSON en intento {attempt + 1}: {e}")
                if attempt < max_attempts - 1:
                    logger.info(f"üîÑ Reintentando en 1 segundo...")
                    time.sleep(1)
                else:
                    logger.error("‚ùå M√°ximo de intentos alcanzado. Creando configuraci√≥n por defecto.")
                    self.create_default_config()
                    
            except Exception as e:
                logger.error(f"‚ùå Error inesperado en intento {attempt + 1}: {e}")
                if attempt < max_attempts - 1:
                    time.sleep(1)
                else:
                    self.create_default_config()

    def create_default_config(self):
        """Crea una configuraci√≥n por defecto"""
        try:
            self.current_profile = "Default"
            self.profiles = {
                self.current_profile: {
                    "positions": {},
                    "favorites": []
                }
            }
            self.positions_memory = {}
            self.favorite_numbers = []
            
            # Guardar configuraci√≥n por defecto
            self.save_config_safe()
            logger.info("‚úÖ Configuraci√≥n por defecto creada")
            
        except Exception as e:
            logger.error(f"‚ùå Error creando configuraci√≥n por defecto: {e}")

    def save_config_safe(self):
        """Guarda la configuraci√≥n de forma segura"""
        try:
            # Actualizar las posiciones en el perfil actual
            if self.current_profile:
                if self.current_profile not in self.profiles:
                    self.profiles[self.current_profile] = {}
                self.profiles[self.current_profile]["positions"] = self.positions_memory
            
            data = {
                "profiles": self.profiles,
                "last_profile": self.current_profile
            }
            
            # Escribir a archivo temporal primero
            temp_file = self.config_file + ".tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            # Mover archivo temporal al final
            if os.path.exists(temp_file):
                if os.path.exists(self.config_file):
                    os.remove(self.config_file)
                os.rename(temp_file, self.config_file)
            
            logger.info("üíæ Configuraci√≥n guardada correctamente")
            
        except Exception as e:
            logger.error(f"‚ùå Error al guardar la configuraci√≥n: {e}")

    def validate_window_handle(self):
        """Valida que el handle de ventana actual sea v√°lido"""
        if not WIN32_AVAILABLE:
            return True  # Asumir v√°lido si win32gui no est√° disponible
            
        if not self.current_window:
            return False
        
        try:
            if not win32gui.IsWindow(self.current_window):
                return False
            
            if not win32gui.IsWindowVisible(self.current_window):
                return False
            
            title = win32gui.GetWindowText(self.current_window)
            return True
            
        except Exception as e:
            logger.warning(f"Validaci√≥n de ventana fall√≥: {e}")
            return False

    def init_click_patterns(self):
        """Inicializa patrones de click naturales"""
        self.click_patterns = [
            {"pre_delay": (0.05, 0.15), "hold_time": (0.08, 0.12), "post_delay": (0.1, 0.3)},
            {"pre_delay": (0.1, 0.25), "hold_time": (0.06, 0.14), "post_delay": (0.08, 0.2)},
            {"pre_delay": (0.02, 0.08), "hold_time": (0.04, 0.08), "post_delay": (0.05, 0.15)},
            {"pre_delay": (0.2, 0.4), "hold_time": (0.1, 0.18), "post_delay": (0.15, 0.35)},
        ]

    def ask_firefox_startup(self):
        """Pregunta al usuario si desea abrir Firefox autom√°ticamente o usar uno manual"""
        print("\nü¶ä CONFIGURACI√ìN DE FIREFOX PARA BC GAME")
        print("=" * 40)
        print("1. ü§ñ Abrir Firefox autom√°ticamente (puede ser detectado)")
        print("2. üë§ Usar Firefox abierto manualmente (M√ÅS SIGILOSO para BC Game)")
        print("3. ‚ùå Solo usar clicks sin Firefox")
        
        while True:
            try:
                choice = input("\nSelecciona una opci√≥n (1/2/3): ").strip()
                
                if choice == "1":
                    self.auto_open_firefox = True
                    self.manual_firefox = False
                    logger.info("ü§ñ Configurado para abrir Firefox autom√°ticamente")
                    break
                elif choice == "2":
                    self.auto_open_firefox = False  
                    self.manual_firefox = True
                    logger.info("üë§ Configurado para usar Firefox manual")
                    print("\nüìã INSTRUCCIONES PARA BC GAME:")
                    print("1. Abre Firefox manualmente ANTES de usar el bot")
                    print("2. Navega a BC Game: https://bc.game")
                    print("3. Inicia sesi√≥n y ve al juego de ruleta")
                    print("4. Mant√©n la ventana de Firefox visible")
                    print("5. El bot detectar√° autom√°ticamente la ventana")
                    break
                elif choice == "3":
                    self.auto_open_firefox = False
                    self.manual_firefox = False
                    logger.info("‚ùå Solo se usar√°n clicks, sin Firefox")
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Selecciona 1, 2 o 3")
                    
            except KeyboardInterrupt:
                logger.info("‚ùå Operaci√≥n cancelada")
                return

    def setup_firefox(self):
        """Configura Firefox de forma m√°s sigilosa para BC Game"""
        try:
            firefox_options = Options()
            
            # ===== CONFIGURACIONES ANTI-DETECCI√ìN PARA BC GAME =====
            
            # Desactivar WebDriver completamente
            firefox_options.set_preference("dom.webdriver.enabled", False)
            firefox_options.set_preference("useAutomationExtension", False)
            
            # Ocultar que es un navegador automatizado
            firefox_options.set_preference("marionette.enabled", False)
            
            # User Agent espec√≠fico para BC Game (simular navegador normal)
            firefox_options.set_preference("general.useragent.override", 
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:139.0) Gecko/20100101 Firefox/139.0")
            
            # Desactivar logging de WebDriver
            firefox_options.add_argument("--log-level=3")
            firefox_options.set_preference("webdriver.log.level", "OFF")
            
            # Configuraciones de privacidad mejoradas para BC Game
            firefox_options.set_preference("privacy.trackingprotection.enabled", True)
            firefox_options.set_preference("dom.disable_beforeunload", True)
            
            # Desactivar automatizaci√≥n detectables
            firefox_options.set_preference("dom.webnotifications.enabled", False)
            firefox_options.set_preference("media.navigator.enabled", False)
            firefox_options.set_preference("permissions.default.microphone", 2)
            firefox_options.set_preference("permissions.default.camera", 2)
            
            # Configuraciones de ventana natural
            firefox_options.add_argument("--width=1366")
            firefox_options.add_argument("--height=768")
            
            # Perfil personalizado para BC Game
            firefox_options.set_preference("browser.startup.homepage", "about:blank")
            firefox_options.set_preference("startup.homepage_welcome_url", "")  
            firefox_options.set_preference("startup.homepage_welcome_url.additional", "")
            
            # JavaScript avanzado para BC Game
            firefox_options.set_preference("javascript.enabled", True)
            firefox_options.set_preference("dom.webgl.disabled", False)
            
            # Configuraciones espec√≠ficas para sitios de juegos
            firefox_options.set_preference("plugin.state.flash", 2)
            firefox_options.set_preference("media.autoplay.default", 0)  # Permitir autoplay
            
            # Crear driver con configuraci√≥n sigilosa
            service = Service(log_output=os.devnull)  # Sin logs visibles
            self.driver = webdriver.Firefox(service=service, options=firefox_options)
            
            # Ejecutar scripts anti-detecci√≥n espec√≠ficos para BC Game
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_script("delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array")
            self.driver.execute_script("delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise")
            self.driver.execute_script("delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol")
            
            logger.info("ü¶ä Firefox configurado en modo ULTRA SIGILOSO para BC Game")
            
            # Abrir p√°gina inicial
            self.driver.get("about:blank")
            time.sleep(2)
            
            # Maximizar despu√©s de cargar
            self.driver.maximize_window()
            
            print("\nüéØ FIREFOX LISTO PARA BC GAME")
            print("=" * 40)
            print("‚úÖ Configuraci√≥n anti-detecci√≥n aplicada")
            print("‚úÖ Optimizado espec√≠ficamente para BC Game")
            print("‚úÖ Navega manualmente a https://bc.game")
            print("‚úÖ Ve al juego de ruleta y el bot estar√° listo")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error al configurar Firefox: {e}")
            print("\nüí° SUGERENCIA PARA BC GAME:")
            print("- Intenta usar la opci√≥n de Firefox manual (m√°s segura)")
            print("- Verifica que Firefox est√© instalado correctamente")
            print("- BC Game puede detectar automatizaci√≥n, usa modo manual")
            return False

    def setup_manual_firefox(self):
        """Configura el bot para usar Firefox ya abierto manualmente (√ìPTIMO para BC Game)"""
        try:
            print("\nüë§ MODO FIREFOX MANUAL PARA BC GAME")
            print("=" * 50)
            print("‚úÖ Configuraci√≥n M√ÅS SIGILOSA activada")
            print("‚úÖ BC Game NO detectar√° automatizaci√≥n")
            print("‚úÖ Firefox debe estar abierto manualmente")
            print("‚úÖ M√°xima seguridad para BC Game")
            
            # Buscar ventana de Firefox existente
            if self.find_firefox_window():
                print("‚úÖ Firefox detectado y listo para BC Game")
                print("\nüìã RECORDATORIO PARA BC GAME:")
                print("- Mant√©n Firefox visible durante el uso")
                print("- Aseg√∫rate de estar en https://bc.game")
                print("- Ve al juego de ruleta antes de usar el bot")  
                print("- El bot har√° clicks en las coordenadas configuradas")
                print("- BC Game no detectar√° que es automatizaci√≥n")
                return True
            else:
                print("‚ö†Ô∏è No se detect√≥ Firefox abierto")
                print("\nüìã INSTRUCCIONES PARA BC GAME:")
                print("1. Abre Firefox manualmente")
                print("2. Navega a https://bc.game")
                print("3. Inicia sesi√≥n en tu cuenta")
                print("4. Ve al juego de ruleta")
                print("5. Reinicia el bot")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error en configuraci√≥n manual: {e}")
            return False

    def find_firefox_window(self):
        """Encuentra la ventana de Firefox"""
        if not WIN32_AVAILABLE:
            logger.info("üîç win32gui no disponible, usando m√©todo alternativo")
            return True
            
        def enum_windows_callback(hwnd, windows):
            try:
                if win32gui.IsWindowVisible(hwnd):
                    window_text = win32gui.GetWindowText(hwnd)
                    class_name = win32gui.GetClassName(hwnd)
                    
                    firefox_indicators = [
                        "firefox" in class_name.lower(),
                        "mozilla" in window_text.lower(),
                        "firefox" in window_text.lower(),
                        "mozillawindowclass" in class_name.lower()
                    ]
                    
                    if any(firefox_indicators) and len(window_text) > 10:
                        windows.append((hwnd, window_text, class_name))
            except:
                pass
            return True

        windows = []
        try:
            win32gui.EnumWindows(enum_windows_callback, windows)
        except Exception as e:
            logger.error(f"Error al enumerar ventanas: {e}")
            return False
        
        if windows:
            self.current_window = windows[0][0]
            logger.info(f"üéØ Firefox encontrado: {windows[0][1]}")
            return True
        else:
            logger.warning("‚ö†Ô∏è No se encontr√≥ ventana de Firefox")
            return False

    def save_current_position(self, name_prefix="Posicion"):
        """Guarda la posici√≥n actual del cursor"""
        try:
            current_pos = pyautogui.position()
            
            # Generar nombre √∫nico
            counter = 1
            name = f"{name_prefix}_{counter:02d}"
            while name in self.positions_memory:
                counter += 1
                name = f"{name_prefix}_{counter:02d}"
            
            # Guardar posici√≥n
            self.positions_memory[name] = (current_pos.x, current_pos.y)
            self.save_config_safe()
            
            logger.info(f"‚úÖ Posici√≥n guardada: {name} = ({current_pos.x}, {current_pos.y})")
            return name
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando posici√≥n: {e}")
            return None

    def load_saved_position(self):
        """Carga una posici√≥n guardada"""
        if not self.positions_memory:
            logger.info("üìç No hay posiciones guardadas")
            return False
        
        print("\nüìç POSICIONES GUARDADAS:")
        print("=" * 40)
        
        positions_list = list(self.positions_memory.items())
        for i, (name, pos) in enumerate(positions_list, 1):
            print(f"{i}. {name}: ({pos[0]}, {pos[1]})")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona una posici√≥n (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(positions_list):
                name, pos = positions_list[index]
                self.target_position = pos
                logger.info(f"‚úÖ Posici√≥n cargada: {name} = {pos}")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def perform_natural_click(self, x, y):
        """Realiza un click natural en las coordenadas especificadas con velocidad adaptable"""
        try:
            # MODO REL√ÅMPAGO - Velocidad m√°xima sin pausa alguna
            if self.lightning_mode:
                pyautogui.moveTo(x, y, duration=0)  # Movimiento instant√°neo
                pyautogui.click()  # Click inmediato
                logger.info(f"‚ö°‚ö° LIGHTNING Click en ({x}, {y})")
                return True
            
            # MODO ULTRA-R√ÅPIDO - Velocidad extrema con m√≠nimas pausas
            elif self.ultra_fast_mode:
                config = self.speed_configs["ultra"]
                
                # Sin delay pre-click
                pyautogui.moveTo(x, y, duration=random.uniform(*config["move_duration"]))
                
                # Click ultra-r√°pido
                pyautogui.mouseDown()
                time.sleep(random.uniform(*config["hold_time"]))
                pyautogui.mouseUp()
                
                # Delay post-click m√≠nimo
                time.sleep(random.uniform(*config["post_delay"]))
                
                logger.info(f"üöÄ ULTRA Click en ({x}, {y})")
                return True
            
            # MODO TURBO ORIGINAL
            elif self.turbo_mode:
                config = self.speed_configs["fast"]
                
                # Mover cursor r√°pidamente
                pyautogui.moveTo(x, y, duration=random.uniform(*config["move_duration"]))
                
                # Click r√°pido
                pyautogui.click()
                
                # Delay m√≠nimo post-click
                time.sleep(random.uniform(*config["post_delay"]))
                
                logger.info(f"‚ö° TURBO Click en ({x}, {y})")
                return True
            
            else:
                # Modo normal/r√°pido basado en speed_mode
                config = self.speed_configs[self.speed_mode]
                
                # Seleccionar patr√≥n aleatorio si existe
                if hasattr(self, 'click_patterns') and self.click_patterns:
                    pattern = random.choice(self.click_patterns)
                    
                    # Usar patr√≥n o configuraci√≥n de velocidad
                    pre_delay = random.uniform(*config["pre_delay"])
                    hold_time = random.uniform(*config["hold_time"])
                    post_delay = random.uniform(*config["post_delay"])
                else:
                    # Sin patrones, usar solo configuraci√≥n de velocidad
                    pre_delay = random.uniform(*config["pre_delay"])
                    hold_time = random.uniform(*config["hold_time"])
                    post_delay = random.uniform(*config["post_delay"])
                
                # Delay antes del click
                time.sleep(pre_delay)
                
                # Mover cursor con variaci√≥n humana (solo si no es ultra-r√°pido)
                if self.speed_mode in ["normal", "fast"]:
                    variation_x = random.randint(-2, 2)
                    variation_y = random.randint(-2, 2)
                    final_x = x + variation_x
                    final_y = y + variation_y
                else:
                    final_x, final_y = x, y
                
                # Mover cursor
                pyautogui.moveTo(final_x, final_y, duration=random.uniform(*config["move_duration"]))
                
                # Realizar click
                pyautogui.mouseDown()
                time.sleep(hold_time)
                pyautogui.mouseUp()
                
                # Delay despu√©s del click
                time.sleep(post_delay)
                
                logger.info(f"üéØ {self.speed_mode.upper()} Click en ({final_x}, {final_y})")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en click natural: {e}")
            return False

    def start_clicking(self):
        """Inicia el ciclo de clicks autom√°ticos"""
        if not self.target_position:
            logger.warning("‚ö†Ô∏è No hay posici√≥n objetivo configurada")
            return False
        
        self.is_running = True
        logger.info("üöÄ Iniciando clicks autom√°ticos...")
        logger.info("‚ö†Ô∏è Presiona ESC para detener")
        
        def click_loop():
            while self.is_running:
                try:
                    if self.target_position:
                        self.perform_natural_click(*self.target_position)
                        
                        # Delay entre clicks basado en configuraci√≥n de velocidad
                        if self.lightning_mode:
                            delay = random.uniform(0.01, 0.05)  # Velocidad m√°xima
                        elif self.ultra_fast_mode:
                            config = self.speed_configs["ultra"]
                            delay = random.uniform(*config["between_clicks"])
                        elif self.turbo_mode:
                            config = self.speed_configs["fast"]
                            delay = random.uniform(*config["between_clicks"])
                        else:
                            config = self.speed_configs[self.speed_mode]
                            delay = random.uniform(*config["between_clicks"])
                        
                        time.sleep(delay)
                    else:
                        break
                        
                except Exception as e:
                    logger.error(f"‚ùå Error en ciclo de clicks: {e}")
                    break
        
        self.click_thread = threading.Thread(target=click_loop, daemon=True)
        self.click_thread.start()
        return True

    def stop_clicking(self):
        """Detiene el ciclo de clicks"""
        self.is_running = False
        logger.info("‚èπÔ∏è Clicks detenidos")

    def setup_hotkeys(self):
        """Configura las teclas de acceso r√°pido"""
        try:
            # Hotkeys principales
            keyboard.add_hotkey('f1', lambda: self.save_current_position("Rapida"))
            keyboard.add_hotkey('f2', self.load_saved_position)
            keyboard.add_hotkey('f3', self.toggle_clicking)
            keyboard.add_hotkey('esc', self.stop_clicking)
            
            # Hotkeys para n√∫meros de ruleta
            for i in range(10):
                keyboard.add_hotkey(f'ctrl+{i}', lambda num=i: self.record_number(num))
                keyboard.add_hotkey(f'alt+{i}', lambda num=i: self.quick_bet_number(num))
            
            # Hotkeys para gesti√≥n de perfiles
            keyboard.add_hotkey('ctrl+shift+n', self.create_new_profile)  # Nuevo perfil
            keyboard.add_hotkey('ctrl+shift+p', self.switch_profile)      # Cambiar perfil
            keyboard.add_hotkey('ctrl+shift+r', self.rename_profile)      # Renombrar perfil
            keyboard.add_hotkey('ctrl+shift+d', self.delete_profile)      # Eliminar perfil
            keyboard.add_hotkey('ctrl+shift+a', self.show_all_profiles)   # Ver todos los perfiles
            
            # Hotkeys para apuesta m√∫ltiple
            keyboard.add_hotkey('ctrl+shift+m', self.bet_multiple_numbers)      # Apuesta m√∫ltiple manual
            keyboard.add_hotkey('ctrl+shift+b', self.quick_bet_multiple_from_hotkey)  # Apuesta r√°pida favoritos
            keyboard.add_hotkey('ctrl+shift+f', self.set_favorite_numbers)      # Configurar favoritos
            keyboard.add_hotkey('ctrl+shift+c', self.continuous_betting_mode)   # Modo continuo
            
            # Hotkeys para apuestas ultra-r√°pidas (sin confirmaci√≥n)
            keyboard.add_hotkey('ctrl+shift+1', lambda: self.ultra_quick_bet([0, 7, 14, 21, 28]))  # Apuesta r√°pida 1
            keyboard.add_hotkey('ctrl+shift+2', lambda: self.ultra_quick_bet([1, 8, 15, 22, 29]))  # Apuesta r√°pida 2
            keyboard.add_hotkey('ctrl+shift+3', lambda: self.ultra_quick_bet([2, 9, 16, 23, 30]))  # Apuesta r√°pida 3
            
            # Hotkeys para control de velocidad
            keyboard.add_hotkey('ctrl+shift+t', self.toggle_turbo_mode)          # Modo turbo
            keyboard.add_hotkey('ctrl+shift+u', self.toggle_ultra_fast_mode)     # Modo ultra-r√°pido
            keyboard.add_hotkey('ctrl+shift+l', self.toggle_lightning_mode)      # Modo rel√°mpago
            keyboard.add_hotkey('ctrl+shift+v', self.cycle_speed_mode)           # Cambiar velocidad
            keyboard.add_hotkey('ctrl+shift+s', self.show_speed_menu)            # Men√∫ de velocidad
            keyboard.add_hotkey('ctrl+shift+q', lambda: self.turbo_bet_favorites())  # Apuesta turbo favoritos
            
            # Hotkeys para apuestas ultra-r√°pidas por velocidad
            keyboard.add_hotkey('alt+shift+1', lambda: self.lightning_bet_multiple([0, 7, 14, 21, 28]))  # Rel√°mpago 1
            keyboard.add_hotkey('alt+shift+2', lambda: self.lightning_bet_multiple([1, 8, 15, 22, 29]))  # Rel√°mpago 2
            keyboard.add_hotkey('alt+shift+3', lambda: self.lightning_bet_multiple([2, 9, 16, 23, 30]))  # Rel√°mpago 3
            
            # Hotkeys para apuestas INSTANT√ÅNEAS (sin delays)
            keyboard.add_hotkey('ctrl+alt+1', lambda: self.instant_bet_multiple([0, 7, 14, 21, 28]))  # Instant√°neo 1
            keyboard.add_hotkey('ctrl+alt+2', lambda: self.instant_bet_multiple([1, 8, 15, 22, 29]))  # Instant√°neo 2
            keyboard.add_hotkey('ctrl+alt+3', lambda: self.instant_bet_multiple([2, 9, 16, 23, 30]))  # Instant√°neo 3
            keyboard.add_hotkey('ctrl+alt+r', lambda: self.instant_bet_multiple([0, 32, 15, 19, 4, 21, 2, 25, 17, 34]))  # Rojos
            keyboard.add_hotkey('ctrl+alt+b', lambda: self.instant_bet_multiple([3, 6, 9, 12, 18, 21, 30, 36, 5, 14]))  # Negros
            
            # Hotkeys para cambio r√°pido entre primeros 5 perfiles
            for i in range(1, 6):
                keyboard.add_hotkey(f'ctrl+f{i}', lambda num=i: self.quick_switch_profile(num))
            
            logger.info("‚å®Ô∏è Hotkeys configurados:")
            logger.info("   === B√ÅSICOS ===")
            logger.info("   F1: Guardar posici√≥n r√°pida")
            logger.info("   F2: Cargar posici√≥n guardada")
            logger.info("   F3: Iniciar/parar clicks")
            logger.info("   ESC: Detener bot")
            logger.info("   === N√öMEROS ===")
            logger.info("   Ctrl+0-9: Grabar n√∫meros")
            logger.info("   Alt+0-9: Apostar n√∫meros")
            logger.info("   === PERFILES ===")
            logger.info("   Ctrl+Shift+N: Nuevo perfil")
            logger.info("   Ctrl+Shift+P: Cambiar perfil")
            logger.info("   Ctrl+Shift+R: Renombrar perfil")
            logger.info("   Ctrl+Shift+D: Eliminar perfil")
            logger.info("   Ctrl+Shift+A: Ver todos los perfiles")
            logger.info("   === APUESTA M√öLTIPLE ===")
            logger.info("   Ctrl+Shift+M: Apuesta m√∫ltiple manual")
            logger.info("   Ctrl+Shift+B: Apuesta r√°pida favoritos")
            logger.info("   Ctrl+Shift+F: Configurar favoritos")
            logger.info("   Ctrl+Shift+C: Modo continuo")
            logger.info("   === APUESTAS ULTRA-R√ÅPIDAS ===")
            logger.info("   Ctrl+Shift+1: Apuesta r√°pida patr√≥n 1")
            logger.info("   Ctrl+Shift+2: Apuesta r√°pida patr√≥n 2")
            logger.info("   Ctrl+Shift+3: Apuesta r√°pida patr√≥n 3")
            logger.info("   === CONTROL DE VELOCIDAD ===")
            logger.info("   Ctrl+Shift+T: Modo turbo")
            logger.info("   Ctrl+Shift+U: Modo ultra-r√°pido")
            logger.info("   Ctrl+Shift+L: Modo rel√°mpago")
            logger.info("   Ctrl+Shift+V: Cambiar velocidad")
            logger.info("   Ctrl+Shift+S: Men√∫ de velocidad")
            logger.info("   Ctrl+Shift+Q: Apuesta turbo favoritos")
            logger.info("   === APUESTAS REL√ÅMPAGO ===")
            logger.info("   Alt+Shift+1: Apuesta rel√°mpago patr√≥n 1")
            logger.info("   Alt+Shift+2: Apuesta rel√°mpago patr√≥n 2") 
            logger.info("   Alt+Shift+3: Apuesta rel√°mpago patr√≥n 3")
            logger.info("   === APUESTAS INSTANT√ÅNEAS ===")
            logger.info("   Ctrl+Alt+1: Apuesta instant√°nea patr√≥n 1")
            logger.info("   Ctrl+Alt+2: Apuesta instant√°nea patr√≥n 2")
            logger.info("   Ctrl+Alt+3: Apuesta instant√°nea patr√≥n 3")
            logger.info("   Ctrl+Alt+R: Apuesta instant√°nea rojos")
            logger.info("   Ctrl+Alt+B: Apuesta instant√°nea negros")
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando hotkeys: {e}")

    def record_number(self, number):
        """Graba la posici√≥n actual para un n√∫mero espec√≠fico"""
        name = f"Numero_{number:02d}"
        saved_name = self.save_current_position(name)
        if saved_name:
            logger.info(f"üéØ N√∫mero {number} grabado como {saved_name}")

    def quick_bet_number(self, number):
        """Apuesta r√°pidamente a un n√∫mero espec√≠fico"""
        name = f"Numero_{number:02d}"
        if name in self.positions_memory:
            self.target_position = self.positions_memory[name]
            logger.info(f"üé≤ Apostando al n√∫mero {number}")
            self.perform_natural_click(*self.target_position)
        else:
            logger.warning(f"‚ö†Ô∏è N√∫mero {number} no est√° grabado")

    def bet_multiple_numbers(self):
        """Apuesta a m√∫ltiples n√∫meros separados por comas"""
        print("\nüé≤ APOSTAR A M√öLTIPLES N√öMEROS")
        print("=" * 50)
        
        # Mostrar todas las coordenadas disponibles
        if not self.positions_memory:
            logger.warning("‚ùå No hay coordenadas grabadas en este perfil")
            logger.info("üí° Usa la opci√≥n 1 para grabar coordenadas")
            return False
        
        print("üìç COORDENADAS DISPONIBLES:")
        print("-" * 30)
        for i, (name, pos) in enumerate(self.positions_memory.items(), 1):
            print(f"  {i}. {name}: ({pos[0]}, {pos[1]})")
        print("-" * 30)
        
        # Buscar n√∫meros espec√≠ficos (formato Numero_XX)
        available_numbers = []
        number_positions = {}
        
        for pos_name, pos_coords in self.positions_memory.items():
            # Buscar patrones de n√∫meros
            if pos_name.startswith("Numero_"):
                try:
                    num = int(pos_name.split("_")[1])
                    if 0 <= num <= 36:
                        available_numbers.append(num)
                        number_positions[num] = pos_coords
                except:
                    pass
            # Tambi√©n buscar n√∫meros directos (0, 1, 2, etc.)
            elif pos_name.isdigit():
                try:
                    num = int(pos_name)
                    if 0 <= num <= 36:
                        available_numbers.append(num)
                        number_positions[num] = pos_coords
                except:
                    pass
        
        if available_numbers:
            available_numbers.sort()
            print(f"üéØ N√∫meros detectados autom√°ticamente: {', '.join(map(str, available_numbers))}")
            print("=" * 50)
            
            try:
                # Solicitar n√∫meros a apostar
                numbers_input = input("Ingresa los n√∫meros separados por comas (ej: 0,7,14,21): ").strip()
                
                if not numbers_input:
                    logger.warning("‚ùå No se ingresaron n√∫meros")
                    return False
                
                # Procesar n√∫meros
                try:
                    numbers_to_bet = []
                    for num_str in numbers_input.split(','):
                        num = int(num_str.strip())
                        if 0 <= num <= 36:
                            numbers_to_bet.append(num)
                        else:
                            logger.warning(f"‚ö†Ô∏è N√∫mero {num} fuera de rango (0-36)")
                    
                    if not numbers_to_bet:
                        logger.warning("‚ùå No hay n√∫meros v√°lidos para apostar")
                        return False
                    
                except ValueError:
                    logger.error("‚ùå Formato inv√°lido. Usa n√∫meros separados por comas")
                    return False
                
                # Verificar que los n√∫meros est√©n disponibles
                missing_numbers = []
                valid_numbers = []
                
                for num in numbers_to_bet:
                    if num in number_positions:
                        valid_numbers.append(num)
                    else:
                        missing_numbers.append(num)
                
                if missing_numbers:
                    logger.warning(f"‚ö†Ô∏è N√∫meros no disponibles: {', '.join(map(str, missing_numbers))}")
                
                if not valid_numbers:
                    logger.error("‚ùå Ning√∫n n√∫mero est√° disponible")
                    return False
                
                # Confirmar apuesta
                print(f"\nüéØ N√öMEROS A APOSTAR: {', '.join(map(str, valid_numbers))}")
                if missing_numbers:
                    print(f"‚ö†Ô∏è N√öMEROS OMITIDOS: {', '.join(map(str, missing_numbers))}")
                
                confirm = input("¬øConfirmar apuesta? (s/N): ").strip().lower()
                if confirm != 's':
                    logger.info("‚ùå Apuesta cancelada")
                    return False
                
                # Realizar apuestas
                logger.info(f"üöÄ Iniciando apuesta a {len(valid_numbers)} n√∫meros...")
                
                for i, num in enumerate(valid_numbers, 1):
                    position = number_positions[num]
                    
                    logger.info(f"üé≤ [{i}/{len(valid_numbers)}] Apostando al n√∫mero {num}")
                    
                    # Realizar click natural
                    if self.perform_natural_click(*position):
                        # Delay entre clicks para parecer m√°s humano
                        if i < len(valid_numbers):
                            if self.turbo_mode:
                                delay = random.uniform(0.05, 0.15)  # Delay m√≠nimo en turbo
                            else:
                                delay = random.uniform(0.5, 1.5)    # Delay normal
                            time.sleep(delay)
                    else:
                        logger.error(f"‚ùå Error apostando al n√∫mero {num}")
                
                logger.info(f"‚úÖ Apuesta completada: {len(valid_numbers)} n√∫meros")
                
                # Preguntar si hacer otra apuesta
                return self._ask_for_another_bet()
                
            except KeyboardInterrupt:
                logger.info("‚ùå Apuesta cancelada por el usuario")
                return False
            except Exception as e:
                logger.error(f"‚ùå Error en apuesta m√∫ltiple: {e}")
                return False
        
        else:
            # No hay n√∫meros detectados autom√°ticamente, usar modo manual
            print("‚ö†Ô∏è No se detectaron n√∫meros autom√°ticamente")
            print("üîß MODO MANUAL MEJORADO PARA BC GAME")
            print("=" * 50)
            print("üí° Puedes usar:")
            print("   - N√∫meros simples: 0,1,6,31")
            print("   - Nombres completos: Numero_00,Numero_01,Numero_06,Numero_31")
            print("   - Nombres de coordenadas: Posicion_01,Posicion_02")
            print("=" * 50)
            
            try:
                positions_input = input("Ingresa n√∫meros o nombres separados por comas: ").strip()
                
                if not positions_input:
                    logger.warning("‚ùå No se ingresaron nombres")
                    return False
                
                # Procesar nombres - Mejorado para BC Game
                position_names = [name.strip() for name in positions_input.split(',')]
                valid_positions = []
                missing_positions = []
                
                for name in position_names:
                    # Buscar nombre exacto primero
                    if name in self.positions_memory:
                        valid_positions.append((name, self.positions_memory[name]))
                    else:
                        # Si es un n√∫mero, intentar formato Numero_XX
                        try:
                            if name.isdigit():
                                num = int(name)
                                if 0 <= num <= 36:
                                    numero_format = f"Numero_{num:02d}"
                                    if numero_format in self.positions_memory:
                                        valid_positions.append((numero_format, self.positions_memory[numero_format]))
                                        logger.info(f"‚úÖ Convertido: {name} ‚Üí {numero_format}")
                                    else:
                                        missing_positions.append(name)
                                else:
                                    missing_positions.append(name)
                            else:
                                missing_positions.append(name)
                        except:
                            missing_positions.append(name)
                
                if missing_positions:
                    logger.warning(f"‚ö†Ô∏è Coordenadas no encontradas: {', '.join(missing_positions)}")
                
                if not valid_positions:
                    logger.error("‚ùå Ninguna coordenada est√° disponible")
                    return False
                
                # Confirmar apuesta
                print(f"\nüéØ COORDENADAS A USAR:")
                for name, pos in valid_positions:
                    print(f"  ‚Ä¢ {name}: ({pos[0]}, {pos[1]})")
                
                if missing_positions:
                    print(f"‚ö†Ô∏è COORDENADAS OMITIDAS: {', '.join(missing_positions)}")
                
                confirm = input("¬øConfirmar apuesta? (s/N): ").strip().lower()
                if confirm != 's':
                    logger.info("‚ùå Apuesta cancelada")
                    return False
                
                # Realizar apuestas
                logger.info(f"üöÄ Iniciando apuesta a {len(valid_positions)} coordenadas...")
                
                for i, (name, position) in enumerate(valid_positions, 1):
                    logger.info(f"üé≤ [{i}/{len(valid_positions)}] Apostando en {name}")
                    
                    # Realizar click natural
                    if self.perform_natural_click(*position):
                        # Delay entre clicks
                        if i < len(valid_positions):
                            if self.turbo_mode:
                                delay = random.uniform(0.05, 0.15)  # Delay m√≠nimo en turbo
                            else:
                                delay = random.uniform(0.5, 1.5)    # Delay normal
                            time.sleep(delay)
                    else:
                        logger.error(f"‚ùå Error apostando en {name}")
                
                logger.info(f"‚úÖ Apuesta completada: {len(valid_positions)} coordenadas")
                
                # Preguntar si hacer otra apuesta
                return self._ask_for_another_bet()
                
            except KeyboardInterrupt:
                logger.info("‚ùå Apuesta cancelada por el usuario")
                return False
            except Exception as e:
                logger.error(f"‚ùå Error en apuesta manual: {e}")
                return False

    def _ask_for_another_bet(self):
        """Pregunta si hacer otra apuesta inmediatamente"""
        try:
            print("\n" + "="*50)
            print("üé≤ APUESTA COMPLETADA")
            print("="*50)
            print("¬øQu√© quieres hacer ahora?")
            print("1. üîÑ Hacer otra apuesta m√∫ltiple")
            print("2. ‚≠ê Apostar a n√∫meros favoritos")
            print("3. üéØ Apostar a un n√∫mero espec√≠fico")
            print("4. üìã Volver al men√∫ principal")
            print("0. ‚ùå Salir")
            
            choice = input("Selecciona una opci√≥n: ").strip()
            
            if choice == '1':
                # Hacer otra apuesta m√∫ltiple
                return self.bet_multiple_numbers()
            elif choice == '2':
                # Apostar a favoritos
                return self.quick_bet_multiple_from_hotkey()
            elif choice == '3':
                # Apostar a n√∫mero espec√≠fico
                return self._quick_single_bet()
            elif choice == '4':
                # Volver al men√∫
                return True
            elif choice == '0':
                # Salir
                self.exit_requested = True
                return False
            else:
                logger.warning("‚ùå Opci√≥n inv√°lida, volviendo al men√∫")
                return True
                
        except KeyboardInterrupt:
            logger.info("‚ùå Volviendo al men√∫ principal")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return True

    def _quick_single_bet(self):
        """Apuesta r√°pida a un n√∫mero espec√≠fico"""
        try:
            # Mostrar n√∫meros disponibles
            available_numbers = []
            number_positions = {}
            
            for pos_name, pos_coords in self.positions_memory.items():
                if pos_name.startswith("Numero_"):
                    try:
                        num = int(pos_name.split("_")[1])
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
                elif pos_name.isdigit():
                    try:
                        num = int(pos_name)
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
            
            if not available_numbers:
                logger.warning("‚ùå No hay n√∫meros disponibles")
                return self._ask_for_another_bet()
            
            available_numbers.sort()
            print(f"\nüéØ N√∫meros disponibles: {', '.join(map(str, available_numbers))}")
            
            number_input = input("¬øA qu√© n√∫mero apostar?: ").strip()
            number = int(number_input)
            
            if number in number_positions:
                position = number_positions[number]
                logger.info(f"üé≤ Apostando al n√∫mero {number}")
                
                if self.perform_natural_click(*position):
                    logger.info(f"‚úÖ Apuesta al n√∫mero {number} completada")
                else:
                    logger.error(f"‚ùå Error apostando al n√∫mero {number}")
                
                # Preguntar si hacer otra apuesta
                return self._ask_for_another_bet()
            else:
                logger.warning(f"‚ùå N√∫mero {number} no disponible")
                return self._ask_for_another_bet()
                
        except ValueError:
            logger.error("‚ùå N√∫mero inv√°lido")
            return self._ask_for_another_bet()
        except KeyboardInterrupt:
            logger.info("‚ùå Apuesta cancelada")
            return self._ask_for_another_bet()
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return self._ask_for_another_bet()

    def continuous_betting_mode(self):
        """Modo de apuesta continua - m√∫ltiples apuestas seguidas"""
        print("\nüîÑ MODO DE APUESTA CONTINUA")
        print("=" * 50)
        print("Realiza m√∫ltiples apuestas seguidas sin volver al men√∫")
        print("Presiona Ctrl+C en cualquier momento para salir")
        print("=" * 50)
        
        bet_count = 0
        
        try:
            while not self.exit_requested:
                bet_count += 1
                print(f"\nüé≤ APUESTA #{bet_count}")
                print("-" * 30)
                
                # Realizar apuesta
                if not self.bet_multiple_numbers():
                    break
                
                # Peque√±a pausa entre apuestas
                time.sleep(0.5)
                
        except KeyboardInterrupt:
            logger.info(f"\nüîö Modo continuo finalizado. Total de apuestas: {bet_count - 1}")
        except Exception as e:
            logger.error(f"‚ùå Error en modo continuo: {e}")
        
        return True

    def toggle_turbo_mode(self):
        """Activa/desactiva el modo turbo"""
        self.turbo_mode = not self.turbo_mode
        if self.turbo_mode:
            # Desactivar otros modos
            self.ultra_fast_mode = False
            self.lightning_mode = False
        
        status = "ACTIVADO" if self.turbo_mode else "DESACTIVADO"
        logger.info(f"‚ö° MODO TURBO {status}")
        
        if self.turbo_mode:
            logger.info("   üìä Velocidad: R√ÅPIDA (delays reducidos)")
        else:
            logger.info(f"   üìä Velocidad actual: {self.speed_mode.upper()}")
    
    def toggle_ultra_fast_mode(self):
        """Activa/desactiva el modo ultra-r√°pido"""
        self.ultra_fast_mode = not self.ultra_fast_mode
        if self.ultra_fast_mode:
            # Desactivar otros modos
            self.turbo_mode = False
            self.lightning_mode = False
        
        status = "ACTIVADO" if self.ultra_fast_mode else "DESACTIVADO"
        logger.info(f"üöÄ MODO ULTRA-R√ÅPIDO {status}")
        
        if self.ultra_fast_mode:
            logger.info("   üìä Velocidad: EXTREMA (delays m√≠nimos)")
        else:
            logger.info(f"   üìä Velocidad actual: {self.speed_mode.upper()}")
    
    def toggle_lightning_mode(self):
        """Activa/desactiva el modo rel√°mpago (velocidad m√°xima)"""
        self.lightning_mode = not self.lightning_mode
        if self.lightning_mode:
            # Desactivar otros modos
            self.turbo_mode = False
            self.ultra_fast_mode = False
        
        status = "ACTIVADO" if self.lightning_mode else "DESACTIVADO"
        logger.info(f"‚ö°‚ö° MODO REL√ÅMPAGO {status}")
        
        if self.lightning_mode:
            logger.info("   üìä Velocidad: INSTANT√ÅNEA (sin delays)")
            logger.warning("   ‚ö†Ô∏è ATENCI√ìN: M√°xima velocidad - puede ser detectado")
        else:
            logger.info(f"   üìä Velocidad actual: {self.speed_mode.upper()}")
    
    def cycle_speed_mode(self):
        """Cambia entre los diferentes modos de velocidad base"""
        speed_order = ["normal", "fast", "ultra", "lightning"]
        current_index = speed_order.index(self.speed_mode)
        self.speed_mode = speed_order[(current_index + 1) % len(speed_order)]
        
        # Desactivar modos especiales al cambiar velocidad base
        self.turbo_mode = False
        self.ultra_fast_mode = False
        self.lightning_mode = False
        
        logger.info(f"üîÑ VELOCIDAD CAMBIADA A: {self.speed_mode.upper()}")
        
        # Mostrar informaci√≥n de la velocidad
        config = self.speed_configs[self.speed_mode]
        between_min, between_max = config["between_clicks"]
        logger.info(f"   üìä Delay entre clicks: {between_min:.3f}s - {between_max:.3f}s")
        
        if self.speed_mode == "lightning":
            logger.warning("   ‚ö†Ô∏è VELOCIDAD M√ÅXIMA - usar con precauci√≥n")
    
    def set_speed_mode(self, mode):
        """Establece un modo de velocidad espec√≠fico"""
        if mode in self.speed_configs:
            self.speed_mode = mode
            
            # Desactivar modos especiales
            self.turbo_mode = False
            self.ultra_fast_mode = False
            self.lightning_mode = False
            
            logger.info(f"‚öôÔ∏è VELOCIDAD ESTABLECIDA: {mode.upper()}")
            
            config = self.speed_configs[mode]
            between_min, between_max = config["between_clicks"]
            logger.info(f"   üìä Delay entre clicks: {between_min:.3f}s - {between_max:.3f}s")
        else:
            logger.error(f"‚ùå Modo de velocidad inv√°lido: {mode}")
    
    def show_speed_menu(self):
        """Muestra men√∫ de configuraci√≥n de velocidad"""
        print("\nüöÄ MEN√ö DE VELOCIDAD")
        print("=" * 50)
        
        # Mostrar velocidad actual
        current_mode = "ESPECIAL"
        if self.lightning_mode:
            current_mode = "REL√ÅMPAGO ‚ö°‚ö°"
        elif self.ultra_fast_mode:
            current_mode = "ULTRA-R√ÅPIDO üöÄ"
        elif self.turbo_mode:
            current_mode = "TURBO ‚ö°"
        else:
            current_mode = self.speed_mode.upper()
        
        print(f"üéØ Velocidad actual: {current_mode}")
        print()
        
        print("MODOS DISPONIBLES:")
        print("1. NORMAL    - Velocidad natural (1-3 segundos entre clicks)")
        print("2. R√ÅPIDO    - Velocidad acelerada (0.3-1 segundo entre clicks)")
        print("3. ULTRA     - Velocidad extrema (0.1-0.3 segundos entre clicks)")
        print("4. REL√ÅMPAGO - Velocidad m√°xima (0.01-0.05 segundos entre clicks)")
        print()
        print("MODOS ESPECIALES:")
        print("5. TURBO     - Modo turbo optimizado")
        print("6. ULTRA-FAST - Modo ultra-r√°pido avanzado")
        print("7. LIGHTNING - Modo rel√°mpago instant√°neo")
        print()
        print("0. Volver al men√∫ principal")
        print()
        
        try:
            choice = input("Elige una opci√≥n (0-7): ").strip()
            
            if choice == "0":
                return
            elif choice == "1":
                self.set_speed_mode("normal")
            elif choice == "2":
                self.set_speed_mode("fast")
            elif choice == "3":
                self.set_speed_mode("ultra")
            elif choice == "4":
                self.set_speed_mode("lightning")
            elif choice == "5":
                self.toggle_turbo_mode()
            elif choice == "6":
                self.toggle_ultra_fast_mode()
            elif choice == "7":
                self.toggle_lightning_mode()
            else:
                logger.warning("‚ö†Ô∏è Opci√≥n inv√°lida")
        
        except Exception as e:
            logger.error(f"‚ùå Error en men√∫ de velocidad: {e}")
    
    def lightning_bet_multiple(self, numbers):
        """Apuesta m√∫ltiple con velocidad rel√°mpago"""
        if not numbers:
            logger.warning("‚ö†Ô∏è No se proporcionaron n√∫meros para apostar")
            return False
        
        # Activar modo rel√°mpago temporalmente
        original_lightning = self.lightning_mode
        self.lightning_mode = True
        
        try:
            logger.info(f"‚ö°‚ö° APUESTA REL√ÅMPAGO: {', '.join(map(str, numbers))}")
            
            successful_bets = 0
            for num in numbers:
                # Buscar coordenadas del n√∫mero
                num_key = f"Numero_{num:02d}"
                if num_key in self.positions_memory:
                    position = self.positions_memory[num_key]
                    if self.perform_natural_click(*position):
                        successful_bets += 1
                        logger.info(f"‚ö° N√∫mero {num} apostado")
                else:
                    logger.warning(f"‚ö†Ô∏è N√∫mero {num} no encontrado")
            
            logger.info(f"‚úÖ APUESTA REL√ÅMPAGO COMPLETADA: {successful_bets}/{len(numbers)} n√∫meros")
            return successful_bets > 0
            
        except Exception as e:
            logger.error(f"‚ùå Error en apuesta rel√°mpago: {e}")
            return False
        finally:
            # Restaurar modo original
            self.lightning_mode = original_lightning

    def turbo_bet_favorites(self):
        """Apuesta turbo a n√∫meros favoritos - m√°xima velocidad"""
        if not hasattr(self, 'favorite_numbers') or not self.favorite_numbers:
            logger.warning("‚ö†Ô∏è No hay n√∫meros favoritos configurados")
            logger.info("üí° Usa Ctrl+Shift+F para configurar favoritos")
            return False
        
        # Activar modo turbo temporalmente
        original_turbo = self.turbo_mode
        self.turbo_mode = True
        
        try:
            # Buscar posiciones de n√∫meros favoritos
            valid_positions = []
            for num in self.favorite_numbers:
                name = f"Numero_{num:02d}"
                if name in self.positions_memory:
                    valid_positions.append((num, self.positions_memory[name]))
            
            if not valid_positions:
                logger.warning("‚ö†Ô∏è No se encontraron posiciones para n√∫meros favoritos")
                return False
            
            # Realizar apuesta turbo
            logger.info(f"‚ö° APUESTA TURBO FAVORITOS: {', '.join(map(str, self.favorite_numbers))}")
            
            for num, position in valid_positions:
                self.perform_natural_click(*position)
                time.sleep(0.05)  # Delay m√≠nimo entre clicks
            
            logger.info(f"‚úÖ Apuesta turbo completada: {len(valid_positions)} n√∫meros en modo ultra-r√°pido")
            return True
            
        finally:
            # Restaurar modo turbo original
            self.turbo_mode = original_turbo
            
    def ultra_quick_bet(self, numbers_list):
        """Apuesta ultra-r√°pida sin confirmaci√≥n a una lista predefinida"""
        try:
            # Buscar n√∫meros disponibles
            available_numbers = []
            number_positions = {}
            
            for pos_name, pos_coords in self.positions_memory.items():
                if pos_name.startswith("Numero_"):
                    try:
                        num = int(pos_name.split("_")[1])
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
                elif pos_name.isdigit():
                    try:
                        num = int(pos_name)
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
            
            # Filtrar n√∫meros que est√°n disponibles
            valid_numbers = [num for num in numbers_list if num in number_positions]
            
            if not valid_numbers:
                logger.warning("‚ö†Ô∏è No hay n√∫meros disponibles para apuesta ultra-r√°pida")
                return False
            
            # Realizar apuesta sin confirmaci√≥n
            logger.info(f"‚ö° APUESTA ULTRA-R√ÅPIDA: {', '.join(map(str, valid_numbers))}")
            
            for num in valid_numbers:
                position = number_positions[num]
                self.perform_natural_click(*position)
                
                # Delay entre clicks - m√°s corto en modo turbo
                if self.turbo_mode:
                    time.sleep(random.uniform(0.05, 0.1))  # Delay m√≠nimo en turbo
                else:
                    time.sleep(random.uniform(0.2, 0.5))   # Delay normal
            
            logger.info(f"‚úÖ Apuesta ultra-r√°pida completada: {len(valid_numbers)} n√∫meros")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en apuesta ultra-r√°pida: {e}")
            return False

    def quick_bet_multiple_from_hotkey(self):
        """Versi√≥n r√°pida para hotkey - usa n√∫meros predefinidos"""
        # Buscar si hay n√∫meros favoritos guardados
        favorites_key = "numeros_favoritos"
        
        if hasattr(self, 'favorite_numbers') and self.favorite_numbers:
            numbers_to_bet = self.favorite_numbers
        else:
            # Si no hay favoritos, usar n√∫meros comunes
            common_numbers = [0, 7, 14, 21, 28]  # N√∫meros espaciados en la ruleta
            numbers_to_bet = []
            
            for num in common_numbers:
                name = f"Numero_{num:02d}"
                if name in self.positions_memory:
                    numbers_to_bet.append(num)
            
            if not numbers_to_bet:
                logger.warning("‚ö†Ô∏è No hay n√∫meros grabados para apuesta r√°pida")
                logger.info("üí° Usa Ctrl+Shift+F para configurar n√∫meros favoritos")
                return False
        
        # Realizar apuesta sin confirmaci√≥n
        logger.info(f"üöÄ Apuesta r√°pida: {', '.join(map(str, numbers_to_bet))}")
        
        for num in numbers_to_bet:
            name = f"Numero_{num:02d}"
            if name in self.positions_memory:
                position = self.positions_memory[name]
                self.perform_natural_click(*position)
                
                # Delay entre clicks - ajustado seg√∫n modo
                if self.turbo_mode:
                    time.sleep(random.uniform(0.05, 0.15))  # M√°s r√°pido en turbo
                else:
                    time.sleep(random.uniform(0.3, 0.8))    # Normal
        
        logger.info(f"‚úÖ Apuesta r√°pida completada: {len(numbers_to_bet)} n√∫meros")
        
        # Preguntar si hacer otra apuesta
        return self._ask_for_another_bet()

    def set_favorite_numbers(self):
        """Configura n√∫meros favoritos para apuesta r√°pida"""
        print("\n‚≠ê CONFIGURAR N√öMEROS FAVORITOS")
        print("=" * 40)
        print("Estos n√∫meros se usar√°n para la apuesta r√°pida (Ctrl+Shift+B)")
        print("=" * 40)
        
        try:
            numbers_input = input("Ingresa tus n√∫meros favoritos separados por comas: ").strip()
            
            if not numbers_input:
                logger.info("‚ùå Configuraci√≥n cancelada")
                return False
            
            # Procesar n√∫meros
            try:
                favorite_numbers = []
                for num_str in numbers_input.split(','):
                    num = int(num_str.strip())
                    if 0 <= num <= 36:
                        favorite_numbers.append(num)
                    else:
                        logger.warning(f"‚ö†Ô∏è N√∫mero {num} fuera de rango (0-36)")
                
                if not favorite_numbers:
                    logger.warning("‚ùå No hay n√∫meros v√°lidos")
                    return False
                
                # Guardar n√∫meros favoritos
                self.favorite_numbers = favorite_numbers
                
                # Guardar en configuraci√≥n
                if self.current_profile not in self.profiles:
                    self.profiles[self.current_profile] = {}
                
                self.profiles[self.current_profile]["favorites"] = favorite_numbers
                self.save_config_safe()
                
                logger.info(f"‚≠ê N√∫meros favoritos configurados: {', '.join(map(str, favorite_numbers))}")
                logger.info("üöÄ Usa Ctrl+Shift+B para apuesta r√°pida")
                return True
                
            except ValueError:
                logger.error("‚ùå Formato inv√°lido. Usa n√∫meros separados por comas")
                return False
                
        except KeyboardInterrupt:
            logger.info("‚ùå Configuraci√≥n cancelada")
            return False

    def toggle_clicking(self):
        """Alterna entre iniciar y parar clicks"""
        if self.is_running:
            self.stop_clicking()
        else:
            self.start_clicking()

    def display_menu(self):
        """Muestra el men√∫ principal"""
        print("\n" + "="*60)
        print("üé∞ BC GAME BOT - MEN√ö PRINCIPAL")
        print("="*60)
        print(f"üìÅ Perfil actual: {self.current_profile}")
        print(f"üìç Posiciones guardadas: {len(self.positions_memory)}")
        if hasattr(self, 'favorite_numbers') and self.favorite_numbers:
            print(f"‚≠ê N√∫meros favoritos: {', '.join(map(str, self.favorite_numbers))}")
        if self.target_position:
            print(f"üéØ Posici√≥n objetivo: {self.target_position}")
        
        # Mostrar estado de velocidad actual
        if self.lightning_mode:
            print("‚ö°‚ö° MODO REL√ÅMPAGO ACTIVADO (VELOCIDAD M√ÅXIMA)")
        elif self.ultra_fast_mode:
            print("üöÄ MODO ULTRA-R√ÅPIDO ACTIVADO")
        elif self.turbo_mode:
            print("‚ö° MODO TURBO ACTIVADO")
        else:
            print(f"üïê Velocidad: {self.speed_mode.upper()}")
            
        print("="*60)

    def create_new_profile(self):
        """Crea un nuevo perfil de juego"""
        print("\nüìÅ CREAR NUEVO PERFIL")
        print("=" * 40)
        
        # Mostrar perfiles existentes
        if self.profiles:
            print("Perfiles existentes:")
            for i, profile_name in enumerate(self.profiles.keys(), 1):
                print(f"  {i}. {profile_name}")
            print()
        
        try:
            profile_name = input("Nombre del nuevo perfil: ").strip()
            
            if not profile_name:
                logger.warning("‚ùå El nombre no puede estar vac√≠o")
                return False
            
            if profile_name in self.profiles:
                logger.warning(f"‚ùå El perfil '{profile_name}' ya existe")
                return False
            
            # Crear nuevo perfil
            self.profiles[profile_name] = {"positions": {}}
            
            # Preguntar si cambiar al nuevo perfil
            change = input(f"¬øCambiar al perfil '{profile_name}'? (s/N): ").strip().lower()
            if change == 's':
                self.current_profile = profile_name
                self.positions_memory = {}
            
            self.save_config_safe()
            logger.info(f"‚úÖ Perfil '{profile_name}' creado exitosamente")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error creando perfil: {e}")
            return False

    def switch_profile(self):
        """Cambia entre perfiles existentes"""
        if not self.profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return False
        
        print("\nüìÅ CAMBIAR PERFIL")
        print("=" * 40)
        
        profiles_list = list(self.profiles.keys())
        for i, profile_name in enumerate(profiles_list, 1):
            marker = "üëâ" if profile_name == self.current_profile else "  "
            positions_count = len(self.profiles[profile_name].get("positions", {}))
            print(f"{marker} {i}. {profile_name} ({positions_count} posiciones)")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona un perfil (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(profiles_list):
                selected_profile = profiles_list[index]
                
                if selected_profile == self.current_profile:
                    logger.info(f"‚ÑπÔ∏è Ya est√°s en el perfil '{selected_profile}'")
                    return True
                
                # Cambiar perfil
                self.current_profile = selected_profile
                self.positions_memory = self.profiles[selected_profile].get("positions", {})
                self.favorite_numbers = self.profiles[selected_profile].get("favorites", [])
                self.target_position = None  # Limpiar posici√≥n objetivo
                
                self.save_config_safe()
                logger.info(f"‚úÖ Cambiado al perfil: {selected_profile}")
                logger.info(f"üìç Posiciones disponibles: {len(self.positions_memory)}")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def rename_profile(self):
        """Renombra un perfil existente"""
        if not self.profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return False
        
        print("\nüìù RENOMBRAR PERFIL")
        print("=" * 40)
        
        profiles_list = list(self.profiles.keys())
        for i, profile_name in enumerate(profiles_list, 1):
            marker = "üëâ" if profile_name == self.current_profile else "  "
            print(f"{marker} {i}. {profile_name}")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona perfil a renombrar (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(profiles_list):
                old_name = profiles_list[index]
                new_name = input(f"Nuevo nombre para '{old_name}': ").strip()
                
                if not new_name:
                    logger.warning("‚ùå El nombre no puede estar vac√≠o")
                    return False
                
                if new_name in self.profiles:
                    logger.warning(f"‚ùå El perfil '{new_name}' ya existe")
                    return False
                
                # Renombrar perfil
                self.profiles[new_name] = self.profiles.pop(old_name)
                
                # Actualizar perfil actual si es necesario
                if self.current_profile == old_name:
                    self.current_profile = new_name
                
                self.save_config_safe()
                logger.info(f"‚úÖ Perfil renombrado: '{old_name}' ‚Üí '{new_name}'")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def delete_profile(self):
        """Elimina un perfil existente"""
        if not self.profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return False
        
        if len(self.profiles) == 1:
            logger.warning("‚ùå No puedes eliminar el √∫nico perfil existente")
            return False
        
        print("\nüóëÔ∏è ELIMINAR PERFIL")
        print("=" * 40)
        
        profiles_list = list(self.profiles.keys())
        for i, profile_name in enumerate(profiles_list, 1):
            marker = "üëâ" if profile_name == self.current_profile else "  "
            positions_count = len(self.profiles[profile_name].get("positions", {}))
            print(f"{marker} {i}. {profile_name} ({positions_count} posiciones)")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona perfil a eliminar (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(profiles_list):
                profile_to_delete = profiles_list[index]
                
                # Confirmar eliminaci√≥n
                positions_count = len(self.profiles[profile_to_delete].get("positions", {}))
                print(f"‚ö†Ô∏è Vas a eliminar '{profile_to_delete}' con {positions_count} posiciones")
                confirm = input("¬øEst√°s seguro? (s/N): ").strip().lower()
                
                if confirm != 's':
                    logger.info("‚ùå Eliminaci√≥n cancelada")
                    return False
                
                # Eliminar perfil
                del self.profiles[profile_to_delete]
                
                # Si era el perfil actual, cambiar a otro
                if self.current_profile == profile_to_delete:
                    self.current_profile = list(self.profiles.keys())[0]
                    self.positions_memory = self.profiles[self.current_profile].get("positions", {})
                    self.target_position = None
                    logger.info(f"üìÅ Cambiado autom√°ticamente al perfil: {self.current_profile}")
                
                self.save_config_safe()
                logger.info(f"‚úÖ Perfil '{profile_to_delete}' eliminado")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def show_all_profiles(self):
        """Muestra todos los perfiles y sus posiciones"""
        if not self.profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return
        
        print("\nüìÅ TODOS LOS PERFILES:")
        print("=" * 60)
        
        for profile_name, profile_data in self.profiles.items():
            marker = "üëâ" if profile_name == self.current_profile else "  "
            positions = profile_data.get("positions", {})
            
            print(f"{marker} üìÅ {profile_name} ({len(positions)} posiciones)")
            
            if positions:
                for pos_name, pos_coords in positions.items():
                    print(f"     üìç {pos_name}: ({pos_coords[0]}, {pos_coords[1]})")
            else:
                print("     (sin posiciones guardadas)")
            print()
        
        print("=" * 60)

    def quick_switch_profile(self, profile_number):
        """Cambio r√°pido a un perfil espec√≠fico por n√∫mero"""
        try:
            profiles_list = list(self.profiles.keys())
            
            if 1 <= profile_number <= len(profiles_list):
                target_profile = profiles_list[profile_number - 1]
                
                if target_profile == self.current_profile:
                    logger.info(f"‚ÑπÔ∏è Ya est√°s en el perfil '{target_profile}'")
                    return
                
                # Cambiar perfil
                self.current_profile = target_profile
                self.positions_memory = self.profiles[target_profile].get("positions", {})
                self.favorite_numbers = self.profiles[target_profile].get("favorites", [])
                self.target_position = None
                
                self.save_config_safe()
                logger.info(f"üöÄ Cambio r√°pido al perfil: {target_profile}")
                logger.info(f"üìç Posiciones disponibles: {len(self.positions_memory)}")
            else:
                logger.warning(f"‚ùå No existe perfil #{profile_number}")
                
        except Exception as e:
            logger.error(f"‚ùå Error en cambio r√°pido de perfil: {e}")

    def map_coordinates_to_numbers(self):
        """Mapea coordenadas existentes a n√∫meros espec√≠ficos"""
        print("\nüîó MAPEAR COORDENADAS A N√öMEROS")
        print("=" * 50)
        print("Asigna n√∫meros (0-36) a tus coordenadas existentes")
        print("=" * 50)
        
        if not self.positions_memory:
            logger.warning("‚ùå No hay coordenadas grabadas en este perfil")
            logger.info("üí° Usa la opci√≥n 1 para grabar coordenadas primero")
            return False
        
        # Mostrar coordenadas disponibles
        print("üìç COORDENADAS DISPONIBLES:")
        print("-" * 30)
        positions_list = list(self.positions_memory.items())
        for i, (name, pos) in enumerate(positions_list, 1):
            print(f"  {i}. {name}: ({pos[0]}, {pos[1]})")
        print("-" * 30)
        
        try:
            print("\nüéØ OPCIONES DE MAPEO:")
            print("1. Mapear coordenada individual")
            print("2. Mapear m√∫ltiples coordenadas")
            print("3. Auto-mapear si los nombres son n√∫meros")
            print("0. Cancelar")
            
            choice = input("Selecciona una opci√≥n: ").strip()
            
            if choice == '1':
                return self._map_single_coordinate(positions_list)
            elif choice == '2':
                return self._map_multiple_coordinates(positions_list)
            elif choice == '3':
                return self._auto_map_coordinates()
            elif choice == '0':
                logger.info("‚ùå Mapeo cancelado")
                return False
            else:
                logger.warning("‚ùå Opci√≥n inv√°lida")
                return False
                
        except KeyboardInterrupt:
            logger.info("‚ùå Mapeo cancelado por el usuario")
            return False
        except Exception as e:
            logger.error(f"‚ùå Error en mapeo: {e}")
            return False

    def _map_single_coordinate(self, positions_list):
        """Mapea una sola coordenada a un n√∫mero"""
        try:
            # Seleccionar coordenada
            coord_choice = input("N√∫mero de coordenada a mapear: ").strip()
            coord_index = int(coord_choice) - 1
            
            if 0 <= coord_index < len(positions_list):
                old_name, position = positions_list[coord_index]
                
                # Solicitar n√∫mero
                number_input = input(f"¬øA qu√© n√∫mero (0-36) mapear '{old_name}'?: ").strip()
                number = int(number_input)
                
                if 0 <= number <= 36:
                    new_name = f"Numero_{number:02d}"
                    
                    # Verificar si ya existe
                    if new_name in self.positions_memory and new_name != old_name:
                        overwrite = input(f"‚ö†Ô∏è '{new_name}' ya existe. ¬øSobrescribir? (s/N): ").strip().lower()
                        if overwrite != 's':
                            logger.info("‚ùå Mapeo cancelado")
                            return False
                    
                    # Realizar mapeo
                    if old_name != new_name:
                        # Eliminar nombre anterior y agregar nuevo
                        del self.positions_memory[old_name]
                        self.positions_memory[new_name] = position
                        self.save_config_safe()
                        
                        logger.info(f"‚úÖ Mapeado: '{old_name}' ‚Üí '{new_name}' (n√∫mero {number})")
                    else:
                        logger.info(f"‚ÑπÔ∏è '{old_name}' ya est√° mapeado correctamente")
                    
                    return True
                else:
                    logger.warning("‚ùå N√∫mero debe estar entre 0 y 36")
                    return False
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.error("‚ùå Entrada inv√°lida")
            return False

    def _map_multiple_coordinates(self, positions_list):
        """Mapea m√∫ltiples coordenadas a n√∫meros"""
        print("\nüîó MAPEO M√öLTIPLE")
        print("Formato: n√∫mero_coordenada:n√∫mero_ruleta")
        print("Ejemplo: 1:0,2:7,3:14 (mapea coord 1 al n√∫mero 0, coord 2 al 7, etc.)")
        print("-" * 50)
        
        try:
            mapping_input = input("Ingresa los mapeos separados por comas: ").strip()
            
            if not mapping_input:
                logger.warning("‚ùå No se ingresaron mapeos")
                return False
            
            mappings = []
            for mapping in mapping_input.split(','):
                if ':' in mapping:
                    coord_num, roulette_num = mapping.strip().split(':')
                    coord_index = int(coord_num) - 1
                    roulette_number = int(roulette_num)
                    
                    if 0 <= coord_index < len(positions_list) and 0 <= roulette_number <= 36:
                        mappings.append((coord_index, roulette_number))
                    else:
                        logger.warning(f"‚ö†Ô∏è Mapeo inv√°lido: {mapping}")
                else:
                    logger.warning(f"‚ö†Ô∏è Formato incorrecto: {mapping}")
            
            if not mappings:
                logger.warning("‚ùå No hay mapeos v√°lidos")
                return False
            
            # Mostrar mapeos a realizar
            print(f"\nüéØ MAPEOS A REALIZAR:")
            for coord_index, roulette_number in mappings:
                old_name = positions_list[coord_index][0]
                new_name = f"Numero_{roulette_number:02d}"
                print(f"  ‚Ä¢ '{old_name}' ‚Üí '{new_name}' (n√∫mero {roulette_number})")
            
            confirm = input("¬øConfirmar mapeos? (s/N): ").strip().lower()
            if confirm != 's':
                logger.info("‚ùå Mapeos cancelados")
                return False
            
            # Realizar mapeos
            for coord_index, roulette_number in mappings:
                old_name, position = positions_list[coord_index]
                new_name = f"Numero_{roulette_number:02d}"
                
                if old_name != new_name:
                    # Eliminar nombre anterior si existe
                    if old_name in self.positions_memory:
                        del self.positions_memory[old_name]
                    # Agregar nuevo nombre
                    self.positions_memory[new_name] = position
            
            self.save_config_safe()
            logger.info(f"‚úÖ Completados {len(mappings)} mapeos")
            return True
            
        except ValueError:
            logger.error("‚ùå Formato inv√°lido")
            return False

    def _auto_map_coordinates(self):
        """Auto-mapea coordenadas que ya tienen nombres num√©ricos"""
        mapped_count = 0
        
        # Buscar coordenadas con nombres num√©ricos
        to_rename = []
        for name, position in self.positions_memory.items():
            if name.isdigit():
                try:
                    number = int(name)
                    if 0 <= number <= 36:
                        new_name = f"Numero_{number:02d}"
                        if new_name != name:
                            to_rename.append((name, new_name, position, number))
                except:
                    pass
        
        if not to_rename:
            logger.info("‚ÑπÔ∏è No se encontraron coordenadas para auto-mapear")
            logger.info("üí° Las coordenadas deben tener nombres num√©ricos (0, 1, 2, etc.)")
            return False
        
        # Mostrar auto-mapeos
        print(f"\nü§ñ AUTO-MAPEOS DETECTADOS:")
        for old_name, new_name, position, number in to_rename:
            print(f"  ‚Ä¢ '{old_name}' ‚Üí '{new_name}'")
        
        confirm = input(f"¬øConfirmar {len(to_rename)} auto-mapeos? (s/N): ").strip().lower()
        if confirm != 's':
            logger.info("‚ùå Auto-mapeo cancelado")
            return False
        
        # Realizar auto-mapeos
        for old_name, new_name, position, number in to_rename:
            del self.positions_memory[old_name]
            self.positions_memory[new_name] = position
            mapped_count += 1
        
        self.save_config_safe()
        logger.info(f"‚úÖ Auto-mapeadas {mapped_count} coordenadas")
        return True

    def run_menu(self):
        """Ejecuta el men√∫ principal"""
        while not self.exit_requested:
            self.display_menu()
            
            print("1. üìç Ubicar manualmente (grabar coordenadas)")
            print("2. üìÇ Usar posici√≥n guardada")
            print("3. üöÄ Iniciar clicks autom√°ticos")
            print("4. ‚èπÔ∏è Detener clicks")
            print("5. üìã Ver posiciones guardadas")
            print("6. üóëÔ∏è Limpiar posiciones del perfil actual")
            print("7. ‚å®Ô∏è Configurar hotkeys")
            print("8. ü¶ä Abrir/reabrir Firefox")
            print("9. üìÅ Crear nuevo perfil")
            print("10. üîÑ Cambiar perfil")
            print("11. üìù Renombrar perfil")
            print("12. üóëÔ∏è Eliminar perfil")
            print("13. üìä Ver todos los perfiles")
            print("14. üé≤ Apostar a m√∫ltiples n√∫meros")
            print("15. ‚≠ê Configurar n√∫meros favoritos")
            print("16. üîó Mapear coordenadas a n√∫meros")
            print("17. üîÑ Modo de apuesta continua")
            print("18. üöÄ Configurar velocidad")
            print("19. ‚ö° Activar/desactivar modo turbo")
            print("0. ‚ùå Salir")
            print("="*60)
            
            try:
                choice = input("Selecciona una opci√≥n: ").strip()
                
                if choice == '1':
                    self.manual_locate()
                elif choice == '2':
                    self.load_saved_position()
                elif choice == '3':
                    self.start_clicking()
                elif choice == '4':
                    self.stop_clicking()
                elif choice == '5':
                    self.show_saved_positions()
                elif choice == '6':
                    self.clear_positions()
                elif choice == '7':
                    self.setup_hotkeys()
                elif choice == '8':
                    self.setup_firefox()
                elif choice == '9':
                    self.create_new_profile()
                elif choice == '10':
                    self.switch_profile()
                elif choice == '11':
                    self.rename_profile()
                elif choice == '12':
                    self.delete_profile()
                elif choice == '13':
                    self.show_all_profiles()
                elif choice == '14':
                    self.bet_multiple_numbers()
                elif choice == '15':
                    self.set_favorite_numbers()
                elif choice == '16':
                    self.map_coordinates_to_numbers()
                elif choice == '17':
                    self.continuous_betting_mode()
                elif choice == '18':
                    self.show_speed_menu()
                elif choice == '19':
                    self.toggle_turbo_mode()
                elif choice == '0':
                    self.exit_requested = True
                    logger.info("üëã Saliendo del bot...")
                else:
                    logger.warning("‚ùå Opci√≥n inv√°lida")
                    
            except KeyboardInterrupt:
                self.exit_requested = True
                logger.info("üëã Saliendo del bot...")

    def manual_locate(self):
        """Ubicaci√≥n manual de coordenadas"""
        print("\nüìç UBICACI√ìN MANUAL")
        print("Posiciona el cursor sobre el objetivo y presiona Enter...")
        
        try:
            input("Presiona Enter cuando el cursor est√© en posici√≥n: ")
            current_pos = pyautogui.position()
            
            name = input("Nombre para esta posici√≥n (opcional): ").strip()
            if not name:
                name = "Manual"
            
            self.target_position = (current_pos.x, current_pos.y)
            saved_name = self.save_current_position(name)
            
            logger.info(f"‚úÖ Posici√≥n configurada: {self.target_position}")
            
        except KeyboardInterrupt:
            logger.info("‚ùå Ubicaci√≥n manual cancelada")

    def show_saved_positions(self):
        """Muestra las posiciones guardadas"""
        if not self.positions_memory:
            logger.info("üìç No hay posiciones guardadas")
            return
        
        print("\nüìç POSICIONES GUARDADAS:")
        print("=" * 50)
        for name, pos in self.positions_memory.items():
            print(f"  {name}: ({pos[0]}, {pos[1]})")
        print("=" * 50)

    def clear_positions(self):
        """Limpia todas las posiciones guardadas"""
        confirm = input("¬øEst√°s seguro de limpiar todas las posiciones? (s/N): ").strip().lower()
        if confirm == 's':
            self.positions_memory.clear()
            self.save_config_safe()
            logger.info("üóëÔ∏è Todas las posiciones han sido eliminadas")
        else:
            logger.info("‚ùå Operaci√≥n cancelada")

    def run(self):
        """Funci√≥n principal del bot"""
        try:
            logger.info("üé∞ BC GAME BOT INICIADO")
            logger.info("=" * 50)
            logger.info("üéØ Optimizado espec√≠ficamente para BC Game")
            logger.info("ü•∑ Configuraciones anti-detecci√≥n aplicadas")
            
            # Configurar hotkeys
            self.setup_hotkeys()
            
            # Buscar ventana de Firefox si est√° disponible
            if WIN32_AVAILABLE:
                self.find_firefox_window()
            
            # Ejecutar men√∫ principal
            self.run_menu()
            
        except KeyboardInterrupt:
            logger.info("üëã Bot detenido por el usuario")
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
        finally:
            self.stop_clicking()
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
            logger.info("üîö Bot finalizado")

    def setup_pyautogui(self):
        """Configura pyautogui para m√°xima velocidad y confiabilidad"""
        try:
            # Configuraci√≥n para velocidad EXTREMA
            pyautogui.PAUSE = 0  # SIN PAUSA entre comandos
            pyautogui.FAILSAFE = True  # Mantener seguridad (cursor en esquina para parar)
            
            # Configuraci√≥n para confiabilidad y velocidad m√°xima
            pyautogui.MINIMUM_DURATION = 0  # Sin duraci√≥n m√≠nima para movimientos
            pyautogui.MINIMUM_SLEEP = 0     # Sin sleep m√≠nimo
            
            # Configurar velocidad de mouse al m√°ximo
            import pyautogui
            pyautogui.PAUSE = 0
            
            logger.info("‚öôÔ∏è PyAutoGUI configurado para VELOCIDAD EXTREMA")
            logger.info("   üìä PAUSE: 0s (INSTANT√ÅNEO)")
            logger.info("   üöÄ MINIMUM_DURATION: 0s (SIN DELAYS)")
            logger.info("   ‚ö†Ô∏è FAILSAFE activado (cursor esquina superior izquierda para parar)")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error configurando PyAutoGUI: {e}")
    
    def auto_detect_window(self):
        """Detecta autom√°ticamente la ventana del navegador"""
        if not WIN32_AVAILABLE:
            logger.info("üîç Detecci√≥n autom√°tica de ventana no disponible")
            return False
        
        # Buscar ventana de Firefox/Chrome
        found = self.find_firefox_window()
        if found:
            logger.info("‚úÖ Ventana del navegador detectada autom√°ticamente")
        else:
            logger.info("‚ö†Ô∏è No se detect√≥ ventana del navegador autom√°ticamente")
        
        return found

    def instant_bet_multiple(self, numbers):
        """Apuesta instant√°nea sin delays - VELOCIDAD M√ÅXIMA"""
        if not numbers:
            logger.warning("‚ö†Ô∏è No se proporcionaron n√∫meros para apostar")
            return False
        
        try:
            logger.info(f"‚ö°‚ö°‚ö° APUESTA INSTANT√ÅNEA: {', '.join(map(str, numbers))}")
            
            successful_bets = 0
            for num in numbers:
                # Buscar coordenadas del n√∫mero
                num_key = f"Numero_{num:02d}"
                if num_key in self.positions_memory:
                    position = self.positions_memory[num_key]
                    
                    # CLICK INSTANT√ÅNEO SIN DELAYS
                    pyautogui.moveTo(*position, duration=0)  # Movimiento instant√°neo
                    pyautogui.click()  # Click inmediato
                    
                    successful_bets += 1
                    logger.info(f"‚ö° N√∫mero {num} apostado INSTANT√ÅNEAMENTE")
                else:
                    logger.warning(f"‚ö†Ô∏è N√∫mero {num} no encontrado")
            
            logger.info(f"‚úÖ APUESTA INSTANT√ÅNEA COMPLETADA: {successful_bets}/{len(numbers)} n√∫meros en 0 segundos")
            return successful_bets > 0
            
        except Exception as e:
            logger.error(f"‚ùå Error en apuesta instant√°nea: {e}")
            return False
    
    def turbo_click_position(self, position):
        """Click turbo en una posici√≥n espec√≠fica - sin delays"""
        try:
            x, y = position
            
            # MODO TURBO EXTREMO
            pyautogui.moveTo(x, y, duration=0)  # Movimiento instant√°neo
            pyautogui.click()  # Click inmediato
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en click turbo: {e}")
            return False

if __name__ == "__main__":
    try:
        bot = CasinoBot()
        bot.run()
    except Exception as e:
        print(f"‚ùå Error fatal: {e}")
        input("Presiona Enter para salir...") 