#!/usr/bin/env python3
"""
ü•∑ CLICKER ULTRA SIGILOSO
- No usa Selenium
- No automatiza navegadores  
- Solo clicks puros en coordenadas
- 100% indetectable
"""

import pyautogui
import time
import random
import keyboard
import json
import os
import threading
import logging
from datetime import datetime

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("stealth_clicker.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("StealthClicker")

class StealthClicker:
    def __init__(self):
        self.positions = {}
        self.current_position = None
        self.is_running = False
        self.click_thread = None
        self.config_file = "stealth_config.json"
        
        # Configurar pyautogui para m√°xima naturalidad
        pyautogui.PAUSE = 0.01
        pyautogui.FAILSAFE = True
        
        self.load_config()
        self.setup_hotkeys()
        
        print("ü•∑ CLICKER ULTRA SIGILOSO INICIADO")
        print("=" * 50)
        print("‚úÖ 100% Indetectable - Sin Selenium")
        print("‚úÖ Solo clicks puros en coordenadas")
        print("‚úÖ Funciona con cualquier navegador")
        print("=" * 50)
        
    def load_config(self):
        """Carga configuraci√≥n guardada"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.positions = data.get("positions", {})
                    logger.info(f"‚úÖ {len(self.positions)} posiciones cargadas")
            else:
                self.positions = {}
                logger.info("üìã Nueva configuraci√≥n creada")
        except Exception as e:
            logger.error(f"‚ùå Error cargando config: {e}")
            self.positions = {}
            
    def save_config(self):
        """Guarda configuraci√≥n"""
        try:
            data = {"positions": self.positions}
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            logger.info("‚úÖ Configuraci√≥n guardada")
        except Exception as e:
            logger.error(f"‚ùå Error guardando config: {e}")
            
    def setup_hotkeys(self):
        """Configura las teclas de acceso r√°pido"""
        try:
            keyboard.add_hotkey('f1', self.save_position)
            keyboard.add_hotkey('f2', self.toggle_clicking)
            keyboard.add_hotkey('f3', self.select_position)
            keyboard.add_hotkey('f4', self.show_positions)
            keyboard.add_hotkey('ctrl+q', self.quit_app)
            
            print("\n‚å®Ô∏è CONTROLES:")
            print("F1 = Guardar posici√≥n actual del cursor")
            print("F2 = Iniciar/Parar clicks autom√°ticos")
            print("F3 = Seleccionar posici√≥n para clickear")
            print("F4 = Ver todas las posiciones guardadas")
            print("Ctrl+Q = Salir")
            print("ESC = Parar clicks (emergencia)")
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando hotkeys: {e}")
            
    def save_position(self):
        """Guarda la posici√≥n actual del cursor"""
        try:
            pos = pyautogui.position()
            
            print(f"\nüìç CURSOR EN: ({pos.x}, {pos.y})")
            name = input("Nombre para esta posici√≥n: ").strip()
            
            if name:
                self.positions[name] = (pos.x, pos.y)
                self.save_config()
                logger.info(f"‚úÖ Posici√≥n '{name}' guardada: ({pos.x}, {pos.y})")
            else:
                print("‚ùå Nombre vac√≠o, no se guard√≥")
                
        except Exception as e:
            logger.error(f"‚ùå Error guardando posici√≥n: {e}")
            
    def select_position(self):
        """Selecciona una posici√≥n para clickear"""
        try:
            if not self.positions:
                print("‚ùå No hay posiciones guardadas. Usa F1 para guardar una.")
                return
                
            print("\nüìç POSICIONES DISPONIBLES:")
            print("=" * 40)
            
            positions_list = list(self.positions.items())
            for i, (name, pos) in enumerate(positions_list, 1):
                print(f"{i}. {name}: ({pos[0]}, {pos[1]})")
                
            print("=" * 40)
            
            choice = input("Selecciona posici√≥n (n√∫mero): ").strip()
            
            try:
                index = int(choice) - 1
                if 0 <= index < len(positions_list):
                    name, pos = positions_list[index]
                    self.current_position = pos
                    logger.info(f"‚úÖ Posici√≥n seleccionada: {name} = {pos}")
                    print(f"üéØ Listo para clickear en: {name}")
                else:
                    print("‚ùå N√∫mero inv√°lido")
            except ValueError:
                print("‚ùå Entrada inv√°lida")
                
        except Exception as e:
            logger.error(f"‚ùå Error seleccionando posici√≥n: {e}")
            
    def show_positions(self):
        """Muestra todas las posiciones guardadas"""
        try:
            if not self.positions:
                print("‚ùå No hay posiciones guardadas")
                return
                
            print("\nüìç TODAS LAS POSICIONES:")
            print("=" * 50)
            
            for name, pos in self.positions.items():
                status = "üéØ ACTIVA" if self.current_position == pos else ""
                print(f"‚Ä¢ {name}: ({pos[0]}, {pos[1]}) {status}")
                
            print("=" * 50)
            
        except Exception as e:
            logger.error(f"‚ùå Error mostrando posiciones: {e}")
            
    def natural_click(self, x, y):
        """Realiza un click ultra natural"""
        try:
            # Variaci√≥n humana
            variation_x = random.randint(-2, 2)
            variation_y = random.randint(-2, 2)
            final_x = x + variation_x
            final_y = y + variation_y
            
            # Mover con naturalidad
            duration = random.uniform(0.1, 0.3)
            pyautogui.moveTo(final_x, final_y, duration=duration)
            
            # Delay humano antes del click
            time.sleep(random.uniform(0.05, 0.15))
            
            # Click con duraci√≥n natural
            pyautogui.mouseDown()
            time.sleep(random.uniform(0.02, 0.08))
            pyautogui.mouseUp()
            
            # Delay despu√©s del click
            time.sleep(random.uniform(0.1, 0.3))
            
            logger.info(f"üéØ Click en ({final_x}, {final_y})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en click: {e}")
            return False
            
    def click_loop(self):
        """Bucle principal de clicks"""
        logger.info("üöÄ Iniciando clicks autom√°ticos...")
        logger.info("‚ö†Ô∏è Presiona ESC para detener")
        
        while self.is_running:
            try:
                if self.current_position:
                    self.natural_click(*self.current_position)
                    
                    # Intervalo aleatorio entre clicks (muy humano)
                    interval = random.uniform(2.0, 5.0)
                    time.sleep(interval)
                else:
                    logger.warning("‚ö†Ô∏è No hay posici√≥n seleccionada")
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå Error en bucle de clicks: {e}")
                break
                
        self.is_running = False
        logger.info("‚èπÔ∏è Clicks detenidos")
        
    def toggle_clicking(self):
        """Inicia o detiene los clicks"""
        try:
            if not self.current_position:
                print("‚ùå Primero selecciona una posici√≥n (F3)")
                return
                
            if not self.is_running:
                self.is_running = True
                self.click_thread = threading.Thread(target=self.click_loop)
                self.click_thread.daemon = True
                self.click_thread.start()
                logger.info("‚ñ∂Ô∏è Clicks iniciados")
            else:
                self.is_running = False
                logger.info("‚èπÔ∏è Deteniendo clicks...")
                
        except Exception as e:
            logger.error(f"‚ùå Error alternando clicks: {e}")
            
    def quit_app(self):
        """Sale de la aplicaci√≥n"""
        try:
            self.is_running = False
            logger.info("üëã Saliendo del clicker sigiloso...")
            os._exit(0)
        except:
            os._exit(0)
            
    def run(self):
        """Ejecuta el clicker"""
        try:
            print("\nü•∑ CLICKER SIGILOSO ACTIVO")
            print("Usa las teclas F1-F4 para controlar")
            print("Presiona Ctrl+Q para salir")
            print("\n‚ö†Ô∏è IMPORTANTE:")
            print("1. Abre tu navegador manualmente")
            print("2. Navega al sitio del casino")
            print("3. Usa F1 para guardar posiciones de apuesta")
            print("4. Usa F3 para seleccionar posici√≥n")
            print("5. Usa F2 para iniciar clicks autom√°ticos")
            
            # Mantener el programa corriendo
            keyboard.wait('ctrl+q')
            
        except KeyboardInterrupt:
            logger.info("üëã Programa terminado por el usuario")
        except Exception as e:
            logger.error(f"‚ùå Error en ejecuci√≥n: {e}")

if __name__ == "__main__":
    clicker = StealthClicker()
    clicker.run() 