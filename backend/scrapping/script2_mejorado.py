import pyautogui
import time
import random
import logging
import threading
import keyboard
import json
import os
import sys
import tempfile
from PIL import Image, ImageGrab
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.service import Service

# Intentar importar win32gui, pero continuar sin √©l si no est√° disponible
try:
    import win32gui
    import win32con
    WIN32_AVAILABLE = True
except ImportError:
    WIN32_AVAILABLE = False
    print("‚ö†Ô∏è win32gui no disponible. Algunas funciones de ventana estar√°n limitadas.")

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("roulette_bot.log", encoding='utf-8'), 
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("CasinoBotLogger")

# Configurar el handler de consola para usar UTF-8
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)

# Configurar encoding para Windows
import sys
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

class CasinoBot:
    def __init__(self):
        self.driver = None
        self.target_position = None
        self.target_relative_position = None
        self.window_handle = None
        self.window_position = None
        self.is_running = False
        self.click_thread = None
        self.hotkey_active = False
        self.config_file = "casino_bot_config.json"
        self.game_profiles = {}
        self.current_profile = None
        self.positions_memory = {}
        self.use_speed_mode = False
        self.exit_requested = False
        self.click_patterns = []
        self.last_window_check = 0
        self.auto_open_firefox = True
        self.manual_firefox = False
        self.favorites_numbers = []
        self.turbo_mode = False  # Modo turbo para clicks ultra-r√°pidos
        
        # Configurar pyautogui para mayor naturalidad
        pyautogui.PAUSE = 0.01
        pyautogui.FAILSAFE = True
        
        # Cargar configuraciones y perfiles guardados
        self.load_config_safe()
        self.init_click_patterns()
        
        # Preguntar si desea abrir Firefox autom√°ticamente o usar uno manual
        self.ask_firefox_startup()
        
        # Configurar Firefox seg√∫n la elecci√≥n del usuario
        if self.auto_open_firefox:
            self.setup_firefox()
        elif self.manual_firefox:
            self.setup_manual_firefox()

    def load_config_safe(self):
        """Carga la configuraci√≥n de forma segura con m√∫ltiples intentos"""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                if os.path.exists(self.config_file):
                    # Verificar que el archivo no est√© vac√≠o
                    if os.path.getsize(self.config_file) == 0:
                        logger.warning(f"Archivo de configuraci√≥n vac√≠o en intento {attempt + 1}")
                        self.create_default_config()
                        continue
                    
                    # Intentar leer el archivo
                    with open(self.config_file, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                        
                        if not content:
                            logger.warning(f"Contenido vac√≠o en intento {attempt + 1}")
                            self.create_default_config()
                            continue
                        
                        # Parsear JSON
                        data = json.loads(content)
                        
                        # Validar estructura
                        if not isinstance(data, dict):
                            logger.warning(f"Estructura JSON inv√°lida en intento {attempt + 1}")
                            self.create_default_config()
                            continue
                        
                        # Cargar datos
                        self.game_profiles = data.get("game_profiles", {})
                        
                        # Compatibilidad con versiones anteriores
                        old_positions = data.get("positions", {})
                        if old_positions and not self.game_profiles:
                            self.game_profiles["Default"] = {"positions": old_positions}
                        
                        # Cargar √∫ltimo perfil usado
                        last_profile = data.get("last_profile", None)
                        if last_profile and last_profile in self.game_profiles:
                            self.current_profile = last_profile
                            self.positions_memory = self.game_profiles[last_profile].get("positions", {})
                            # Cargar n√∫meros favoritos si existen
                            self.favorites_numbers = self.game_profiles[last_profile].get("favorites", [])
                        elif self.game_profiles:
                            self.current_profile = list(self.game_profiles.keys())[0]
                            self.positions_memory = self.game_profiles[self.current_profile].get("positions", {})
                            self.favorites_numbers = self.game_profiles[self.current_profile].get("favorites", [])
                        else:
                            self.current_profile = "Default"
                            self.game_profiles[self.current_profile] = {"positions": {}, "favorites": []}
                            self.positions_memory = {}
                            self.favorites_numbers = []
                        
                        logger.info(f"‚úÖ Configuraci√≥n cargada exitosamente: {len(self.game_profiles)} perfiles")
                        logger.info(f"üìÅ Perfil actual: {self.current_profile}")
                        logger.info(f"üìç Posiciones en perfil: {len(self.positions_memory)}")
                        return
                        
                else:
                    logger.info("üìÑ No se encontr√≥ archivo de configuraci√≥n. Creando uno nuevo...")
                    self.create_default_config()
                    return
                    
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error JSON en intento {attempt + 1}: {e}")
                if attempt < max_attempts - 1:
                    logger.info(f"üîÑ Reintentando en 1 segundo...")
                    time.sleep(1)
                else:
                    logger.error("‚ùå M√°ximo de intentos alcanzado. Creando configuraci√≥n por defecto.")
                    self.create_default_config()
                    
            except Exception as e:
                logger.error(f"‚ùå Error inesperado en intento {attempt + 1}: {e}")
                if attempt < max_attempts - 1:
                    time.sleep(1)
                else:
                    self.create_default_config()

    def create_default_config(self):
        """Crea una configuraci√≥n por defecto"""
        try:
            self.current_profile = "Default"
            self.game_profiles = {
                self.current_profile: {
                    "positions": {},
                    "favorites": []
                }
            }
            self.positions_memory = {}
            self.favorites_numbers = []
            
            # Guardar configuraci√≥n por defecto
            self.save_config_safe()
            logger.info("‚úÖ Configuraci√≥n por defecto creada")
            
        except Exception as e:
            logger.error(f"‚ùå Error creando configuraci√≥n por defecto: {e}")

    def save_config_safe(self):
        """Guarda la configuraci√≥n de forma segura"""
        try:
            # Actualizar las posiciones en el perfil actual
            if self.current_profile:
                if self.current_profile not in self.game_profiles:
                    self.game_profiles[self.current_profile] = {}
                self.game_profiles[self.current_profile]["positions"] = self.positions_memory
            
            data = {
                "game_profiles": self.game_profiles,
                "last_profile": self.current_profile
            }
            
            # Escribir a archivo temporal primero
            temp_file = self.config_file + ".tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            # Mover archivo temporal al final
            if os.path.exists(temp_file):
                if os.path.exists(self.config_file):
                    os.remove(self.config_file)
                os.rename(temp_file, self.config_file)
            
            logger.info("üíæ Configuraci√≥n guardada correctamente")
            
        except Exception as e:
            logger.error(f"‚ùå Error al guardar la configuraci√≥n: {e}")

    def validate_window_handle(self):
        """Valida que el handle de ventana actual sea v√°lido"""
        if not WIN32_AVAILABLE:
            return True  # Asumir v√°lido si win32gui no est√° disponible
            
        if not self.window_handle:
            return False
        
        try:
            if not win32gui.IsWindow(self.window_handle):
                return False
            
            if not win32gui.IsWindowVisible(self.window_handle):
                return False
            
            title = win32gui.GetWindowText(self.window_handle)
            return True
            
        except Exception as e:
            logger.warning(f"Validaci√≥n de ventana fall√≥: {e}")
            return False

    def init_click_patterns(self):
        """Inicializa patrones de click naturales"""
        self.click_patterns = [
            {"pre_delay": (0.05, 0.15), "hold_time": (0.08, 0.12), "post_delay": (0.1, 0.3)},
            {"pre_delay": (0.1, 0.25), "hold_time": (0.06, 0.14), "post_delay": (0.08, 0.2)},
            {"pre_delay": (0.02, 0.08), "hold_time": (0.04, 0.08), "post_delay": (0.05, 0.15)},
            {"pre_delay": (0.2, 0.4), "hold_time": (0.1, 0.18), "post_delay": (0.15, 0.35)},
        ]

    def ask_firefox_startup(self):
        """Pregunta al usuario si desea abrir Firefox autom√°ticamente o usar uno manual"""
        print("\nü¶ä CONFIGURACI√ìN DE FIREFOX")
        print("=" * 40)
        print("1. ü§ñ Abrir Firefox autom√°ticamente (puede ser detectado)")
        print("2. üë§ Usar Firefox abierto manualmente (m√°s sigiloso)")
        print("3. ‚ùå Solo usar clicks sin Firefox")
        
        while True:
            try:
                choice = input("\nSelecciona una opci√≥n (1/2/3): ").strip()
                
                if choice == "1":
                    self.auto_open_firefox = True
                    self.manual_firefox = False
                    logger.info("ü§ñ Configurado para abrir Firefox autom√°ticamente")
                    break
                elif choice == "2":
                    self.auto_open_firefox = False  
                    self.manual_firefox = True
                    logger.info("üë§ Configurado para usar Firefox manual")
                    print("\nüìã INSTRUCCIONES:")
                    print("1. Abre Firefox manualmente ANTES de usar el bot")
                    print("2. Navega al sitio del casino")
                    print("3. Mant√©n la ventana de Firefox visible")
                    print("4. El bot detectar√° autom√°ticamente la ventana")
                    break
                elif choice == "3":
                    self.auto_open_firefox = False
                    self.manual_firefox = False
                    logger.info("‚ùå Solo se usar√°n clicks, sin Firefox")
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Selecciona 1, 2 o 3")
                    
            except KeyboardInterrupt:
                logger.info("‚ùå Operaci√≥n cancelada")
                return

    def setup_firefox(self):
        """Configura Firefox de forma m√°s sigilosa"""
        try:
            firefox_options = Options()
            
            # ===== CONFIGURACIONES ANTI-DETECCI√ìN AVANZADAS =====
            
            # Desactivar WebDriver
            firefox_options.set_preference("dom.webdriver.enabled", False)
            firefox_options.set_preference("useAutomationExtension", False)
            
            # Ocultar que es un navegador automatizado
            firefox_options.set_preference("marionette.enabled", False)
            
            # User Agent natural (simular navegador normal)
            firefox_options.set_preference("general.useragent.override", 
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:139.0) Gecko/20100101 Firefox/139.0")
            
            # Desactivar logging de WebDriver
            firefox_options.add_argument("--log-level=3")
            firefox_options.set_preference("webdriver.log.level", "OFF")
            
            # Configuraciones de privacidad mejoradas
            firefox_options.set_preference("privacy.trackingprotection.enabled", True)
            firefox_options.set_preference("dom.disable_beforeunload", True)
            
            # Desactivar automatizaci√≥n detectables
            firefox_options.set_preference("dom.webnotifications.enabled", False)
            firefox_options.set_preference("media.navigator.enabled", False)
            
            # Configuraciones de ventana natural
            firefox_options.add_argument("--width=1366")
            firefox_options.add_argument("--height=768")
            
            # Perfil personalizado (m√°s natural)
            firefox_options.set_preference("browser.startup.homepage", "about:blank")
            firefox_options.set_preference("startup.homepage_welcome_url", "")  
            firefox_options.set_preference("startup.homepage_welcome_url.additional", "")
            
            # JavaScript avanzado
            firefox_options.set_preference("javascript.enabled", True)
            firefox_options.set_preference("dom.webgl.disabled", False)
            
            # Plugins y extensiones
            firefox_options.set_preference("plugin.state.flash", 2)
            firefox_options.set_preference("permissions.default.microphone", 2)
            firefox_options.set_preference("permissions.default.camera", 2)
            
            # Crear driver con configuraci√≥n sigilosa
            service = Service(log_output=os.devnull)  # Sin logs visibles
            self.driver = webdriver.Firefox(service=service, options=firefox_options)
            
            # Ejecutar scripts para mayor naturalidad
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("ü¶ä Firefox configurado en modo SIGILOSO")
            
            # Abrir p√°gina inicial
            self.driver.get("about:blank")
            time.sleep(2)
            
            # Maximizar despu√©s de cargar
            self.driver.maximize_window()
            
            print("\nüéØ FIREFOX LISTO")
            print("=" * 30)
            print("‚úÖ Configuraci√≥n anti-detecci√≥n aplicada")
            print("‚úÖ Navega manualmente al sitio del casino")
            print("‚úÖ El bot estar√° listo para funcionar")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error al configurar Firefox: {e}")
            print("\nüí° SUGERENCIA:")
            print("- Intenta usar la opci√≥n de Firefox manual")
                         print("- Verifica que Firefox est√© instalado correctamente")
             return False

    def setup_manual_firefox(self):
        """Configura el bot para usar Firefox ya abierto manualmente"""
        try:
            print("\nüë§ MODO FIREFOX MANUAL")
            print("=" * 40)
            print("‚úÖ Configuraci√≥n m√°s sigilosa activada")
            print("‚úÖ No se detectar√° automatizaci√≥n")
            print("‚úÖ Firefox debe estar abierto manualmente")
            
            # Buscar ventana de Firefox existente
            if self.find_firefox_window():
                print("‚úÖ Firefox detectado y listo")
                print("\nüìã RECORDATORIO:")
                print("- Mant√©n Firefox visible durante el uso")
                print("- Navega al sitio del casino manualmente")  
                print("- El bot har√° clicks en las coordenadas configuradas")
                return True
            else:
                print("‚ö†Ô∏è No se detect√≥ Firefox abierto")
                print("\nüìã INSTRUCCIONES:")
                print("1. Abre Firefox manualmente")
                print("2. Navega al sitio del casino")
                print("3. Reinicia el bot")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error en configuraci√≥n manual: {e}")
            return False

    def find_firefox_window(self):
        """Encuentra la ventana de Firefox"""
        if not WIN32_AVAILABLE:
            logger.info("üîç win32gui no disponible, usando m√©todo alternativo")
            return True
            
        def enum_windows_callback(hwnd, windows):
            try:
                if win32gui.IsWindowVisible(hwnd):
                    window_text = win32gui.GetWindowText(hwnd)
                    class_name = win32gui.GetClassName(hwnd)
                    
                    firefox_indicators = [
                        "firefox" in class_name.lower(),
                        "mozilla" in window_text.lower(),
                        "firefox" in window_text.lower(),
                        "mozillawindowclass" in class_name.lower()
                    ]
                    
                    if any(firefox_indicators) and len(window_text) > 10:
                        windows.append((hwnd, window_text, class_name))
            except:
                pass
            return True

        windows = []
        try:
            win32gui.EnumWindows(enum_windows_callback, windows)
        except Exception as e:
            logger.error(f"Error al enumerar ventanas: {e}")
            return False
        
        if windows:
            self.window_handle = windows[0][0]
            logger.info(f"üéØ Firefox encontrado: {windows[0][1]}")
            return True
        else:
            logger.warning("‚ö†Ô∏è No se encontr√≥ ventana de Firefox")
            return False

    def save_current_position(self, name_prefix="Posicion"):
        """Guarda la posici√≥n actual del cursor"""
        try:
            current_pos = pyautogui.position()
            
            # Generar nombre √∫nico
            counter = 1
            name = f"{name_prefix}_{counter:02d}"
            while name in self.positions_memory:
                counter += 1
                name = f"{name_prefix}_{counter:02d}"
            
            # Guardar posici√≥n
            self.positions_memory[name] = (current_pos.x, current_pos.y)
            self.save_config_safe()
            
            logger.info(f"‚úÖ Posici√≥n guardada: {name} = ({current_pos.x}, {current_pos.y})")
            return name
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando posici√≥n: {e}")
            return None

    def load_saved_position(self):
        """Carga una posici√≥n guardada"""
        if not self.positions_memory:
            logger.info("üìç No hay posiciones guardadas")
            return False
        
        print("\nüìç POSICIONES GUARDADAS:")
        print("=" * 40)
        
        positions_list = list(self.positions_memory.items())
        for i, (name, pos) in enumerate(positions_list, 1):
            print(f"{i}. {name}: ({pos[0]}, {pos[1]})")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona una posici√≥n (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(positions_list):
                name, pos = positions_list[index]
                self.target_position = pos
                logger.info(f"‚úÖ Posici√≥n cargada: {name} = {pos}")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def perform_natural_click(self, x, y):
        """Realiza un click natural en las coordenadas especificadas"""
        try:
            if self.turbo_mode:
                # MODO TURBO: Delays m√≠nimos para m√°xima velocidad
                # Mover cursor directamente sin variaci√≥n
                pyautogui.moveTo(x, y, duration=0.01)
                
                # Click inmediato sin delays
                pyautogui.click()
                
                # Delay m√≠nimo post-click
                time.sleep(0.05)
                
                logger.info(f"‚ö° TURBO Click en ({x}, {y})")
                return True
            else:
                # Modo normal con naturalidad
                # Seleccionar patr√≥n aleatorio
                pattern = random.choice(self.click_patterns)
                
                # Delay antes del click
                pre_delay = random.uniform(*pattern["pre_delay"])
                time.sleep(pre_delay)
                
                # Mover cursor con variaci√≥n humana
                variation_x = random.randint(-2, 2)
                variation_y = random.randint(-2, 2)
                final_x = x + variation_x
                final_y = y + variation_y
                
                # Mover cursor de forma natural
                pyautogui.moveTo(final_x, final_y, duration=random.uniform(0.1, 0.3))
                
                # Hold time
                hold_time = random.uniform(*pattern["hold_time"])
                
                # Realizar click
                pyautogui.mouseDown()
                time.sleep(hold_time)
                pyautogui.mouseUp()
                
                # Delay despu√©s del click
                post_delay = random.uniform(*pattern["post_delay"])
                time.sleep(post_delay)
                
                logger.info(f"üéØ Click realizado en ({final_x}, {final_y})")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en click natural: {e}")
            return False

    def start_clicking(self):
        """Inicia el ciclo de clicks autom√°ticos"""
        if not self.target_position:
            logger.warning("‚ö†Ô∏è No hay posici√≥n objetivo configurada")
            return False
        
        self.is_running = True
        logger.info("üöÄ Iniciando clicks autom√°ticos...")
        logger.info("‚ö†Ô∏è Presiona ESC para detener")
        
        def click_loop():
            while self.is_running:
                try:
                    if self.target_position:
                        self.perform_natural_click(*self.target_position)
                        
                        # Delay entre clicks (1-3 segundos)
                        delay = random.uniform(1.0, 3.0)
                        time.sleep(delay)
                    else:
                        break
                        
                except Exception as e:
                    logger.error(f"‚ùå Error en ciclo de clicks: {e}")
                    break
        
        self.click_thread = threading.Thread(target=click_loop, daemon=True)
        self.click_thread.start()
        return True

    def stop_clicking(self):
        """Detiene el ciclo de clicks"""
        self.is_running = False
        logger.info("‚èπÔ∏è Clicks detenidos")

    def setup_hotkeys(self):
        """Configura las teclas de acceso r√°pido"""
        try:
            # Hotkeys principales
            keyboard.add_hotkey('f1', lambda: self.save_current_position("Rapida"))
            keyboard.add_hotkey('f2', self.load_saved_position)
            keyboard.add_hotkey('f3', self.toggle_clicking)
            keyboard.add_hotkey('esc', self.stop_clicking)
            
            # Hotkeys para n√∫meros de ruleta
            for i in range(10):
                keyboard.add_hotkey(f'ctrl+{i}', lambda num=i: self.record_number(num))
                keyboard.add_hotkey(f'alt+{i}', lambda num=i: self.quick_bet_number(num))
            
            # Hotkeys para gesti√≥n de perfiles
            keyboard.add_hotkey('ctrl+shift+n', self.create_new_profile)  # Nuevo perfil
            keyboard.add_hotkey('ctrl+shift+p', self.switch_profile)      # Cambiar perfil
            keyboard.add_hotkey('ctrl+shift+r', self.rename_profile)      # Renombrar perfil
            keyboard.add_hotkey('ctrl+shift+d', self.delete_profile)      # Eliminar perfil
            keyboard.add_hotkey('ctrl+shift+a', self.show_all_profiles)   # Ver todos los perfiles
            
            # Hotkeys para apuesta m√∫ltiple
            keyboard.add_hotkey('ctrl+shift+m', self.bet_multiple_numbers)      # Apuesta m√∫ltiple manual
            keyboard.add_hotkey('ctrl+shift+b', self.quick_bet_multiple_from_hotkey)  # Apuesta r√°pida favoritos
            keyboard.add_hotkey('ctrl+shift+f', self.set_favorite_numbers)      # Configurar favoritos
            keyboard.add_hotkey('ctrl+shift+c', self.continuous_betting_mode)   # Modo continuo
            
            # Hotkeys para apuestas ultra-r√°pidas (sin confirmaci√≥n)
            keyboard.add_hotkey('ctrl+shift+1', lambda: self.ultra_quick_bet([0, 7, 14, 21, 28]))  # Apuesta r√°pida 1
            keyboard.add_hotkey('ctrl+shift+2', lambda: self.ultra_quick_bet([1, 8, 15, 22, 29]))  # Apuesta r√°pida 2
            keyboard.add_hotkey('ctrl+shift+3', lambda: self.ultra_quick_bet([2, 9, 16, 23, 30]))  # Apuesta r√°pida 3
            
            # Hotkeys para modo turbo
            keyboard.add_hotkey('ctrl+shift+t', self.toggle_turbo_mode)  # Activar/desactivar turbo
            keyboard.add_hotkey('ctrl+shift+q', lambda: self.turbo_bet_favorites())  # Apuesta turbo favoritos
            
            # Hotkeys para cambio r√°pido entre primeros 5 perfiles
            for i in range(1, 6):
                keyboard.add_hotkey(f'ctrl+f{i}', lambda num=i: self.quick_switch_profile(num))
            
            logger.info("‚å®Ô∏è Hotkeys configurados:")
            logger.info("   === B√ÅSICOS ===")
            logger.info("   F1: Guardar posici√≥n r√°pida")
            logger.info("   F2: Cargar posici√≥n guardada")
            logger.info("   F3: Iniciar/parar clicks")
            logger.info("   ESC: Detener bot")
            logger.info("   === N√öMEROS ===")
            logger.info("   Ctrl+0-9: Grabar n√∫meros")
            logger.info("   Alt+0-9: Apostar n√∫meros")
            logger.info("   === PERFILES ===")
            logger.info("   Ctrl+Shift+N: Nuevo perfil")
            logger.info("   Ctrl+Shift+P: Cambiar perfil")
            logger.info("   Ctrl+Shift+R: Renombrar perfil")
            logger.info("   Ctrl+Shift+D: Eliminar perfil")
            logger.info("   Ctrl+Shift+A: Ver todos los perfiles")
            logger.info("   === APUESTA M√öLTIPLE ===")
            logger.info("   Ctrl+Shift+M: Apuesta m√∫ltiple manual")
            logger.info("   Ctrl+Shift+B: Apuesta r√°pida favoritos")
            logger.info("   Ctrl+Shift+F: Configurar favoritos")
            logger.info("   Ctrl+Shift+C: Modo continuo")
            logger.info("   === APUESTAS ULTRA-R√ÅPIDAS ===")
            logger.info("   Ctrl+Shift+1: Apuesta r√°pida patr√≥n 1")
            logger.info("   Ctrl+Shift+2: Apuesta r√°pida patr√≥n 2")
            logger.info("   Ctrl+Shift+3: Apuesta r√°pida patr√≥n 3")
            logger.info("   === MODO TURBO ===")
            logger.info("   Ctrl+Shift+T: Activar/desactivar modo turbo")
            logger.info("   Ctrl+Shift+Q: Apuesta turbo favoritos")
            logger.info("   === CAMBIO R√ÅPIDO ===")
            logger.info("   Ctrl+F1-F5: Cambio r√°pido a perfiles 1-5")
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando hotkeys: {e}")

    def record_number(self, number):
        """Graba la posici√≥n actual para un n√∫mero espec√≠fico"""
        name = f"Numero_{number:02d}"
        saved_name = self.save_current_position(name)
        if saved_name:
            logger.info(f"üéØ N√∫mero {number} grabado como {saved_name}")

    def quick_bet_number(self, number):
        """Apuesta r√°pidamente a un n√∫mero espec√≠fico"""
        name = f"Numero_{number:02d}"
        if name in self.positions_memory:
            self.target_position = self.positions_memory[name]
            logger.info(f"üé≤ Apostando al n√∫mero {number}")
            self.perform_natural_click(*self.target_position)
        else:
            logger.warning(f"‚ö†Ô∏è N√∫mero {number} no est√° grabado")

    def bet_multiple_numbers(self):
        """Apuesta a m√∫ltiples n√∫meros separados por comas"""
        print("\nüé≤ APOSTAR A M√öLTIPLES N√öMEROS")
        print("=" * 50)
        
        # Mostrar todas las coordenadas disponibles
        if not self.positions_memory:
            logger.warning("‚ùå No hay coordenadas grabadas en este perfil")
            logger.info("üí° Usa la opci√≥n 1 para grabar coordenadas")
            return False
        
        print("üìç COORDENADAS DISPONIBLES:")
        print("-" * 30)
        for i, (name, pos) in enumerate(self.positions_memory.items(), 1):
            print(f"  {i}. {name}: ({pos[0]}, {pos[1]})")
        print("-" * 30)
        
        # Buscar n√∫meros espec√≠ficos (formato Numero_XX)
        available_numbers = []
        number_positions = {}
        
        for pos_name, pos_coords in self.positions_memory.items():
            # Buscar patrones de n√∫meros
            if pos_name.startswith("Numero_"):
                try:
                    num = int(pos_name.split("_")[1])
                    if 0 <= num <= 36:
                        available_numbers.append(num)
                        number_positions[num] = pos_coords
                except:
                    pass
            # Tambi√©n buscar n√∫meros directos (0, 1, 2, etc.)
            elif pos_name.isdigit():
                try:
                    num = int(pos_name)
                    if 0 <= num <= 36:
                        available_numbers.append(num)
                        number_positions[num] = pos_coords
                except:
                    pass
        
        if available_numbers:
            available_numbers.sort()
            print(f"üéØ N√∫meros detectados autom√°ticamente: {', '.join(map(str, available_numbers))}")
            print("=" * 50)
            
            try:
                # Solicitar n√∫meros a apostar
                numbers_input = input("Ingresa los n√∫meros separados por comas (ej: 0,7,14,21): ").strip()
                
                if not numbers_input:
                    logger.warning("‚ùå No se ingresaron n√∫meros")
                    return False
                
                # Procesar n√∫meros
                try:
                    numbers_to_bet = []
                    for num_str in numbers_input.split(','):
                        num = int(num_str.strip())
                        if 0 <= num <= 36:
                            numbers_to_bet.append(num)
                        else:
                            logger.warning(f"‚ö†Ô∏è N√∫mero {num} fuera de rango (0-36)")
                    
                    if not numbers_to_bet:
                        logger.warning("‚ùå No hay n√∫meros v√°lidos para apostar")
                        return False
                    
                except ValueError:
                    logger.error("‚ùå Formato inv√°lido. Usa n√∫meros separados por comas")
                    return False
                
                # Verificar que los n√∫meros est√©n disponibles
                missing_numbers = []
                valid_numbers = []
                
                for num in numbers_to_bet:
                    if num in number_positions:
                        valid_numbers.append(num)
                    else:
                        missing_numbers.append(num)
                
                if missing_numbers:
                    logger.warning(f"‚ö†Ô∏è N√∫meros no disponibles: {', '.join(map(str, missing_numbers))}")
                
                if not valid_numbers:
                    logger.error("‚ùå Ning√∫n n√∫mero est√° disponible")
                    return False
                
                # Confirmar apuesta
                print(f"\nüéØ N√öMEROS A APOSTAR: {', '.join(map(str, valid_numbers))}")
                if missing_numbers:
                    print(f"‚ö†Ô∏è N√öMEROS OMITIDOS: {', '.join(map(str, missing_numbers))}")
                
                confirm = input("¬øConfirmar apuesta? (s/N): ").strip().lower()
                if confirm != 's':
                    logger.info("‚ùå Apuesta cancelada")
                    return False
                
                # Realizar apuestas
                logger.info(f"üöÄ Iniciando apuesta a {len(valid_numbers)} n√∫meros...")
                
                for i, num in enumerate(valid_numbers, 1):
                    position = number_positions[num]
                    
                    logger.info(f"üé≤ [{i}/{len(valid_numbers)}] Apostando al n√∫mero {num}")
                    
                    # Realizar click natural
                    if self.perform_natural_click(*position):
                        # Delay entre clicks para parecer m√°s humano
                        if i < len(valid_numbers):
                            if self.turbo_mode:
                                delay = random.uniform(0.05, 0.15)  # Delay m√≠nimo en turbo
                            else:
                                delay = random.uniform(0.5, 1.5)    # Delay normal
                            time.sleep(delay)
                    else:
                        logger.error(f"‚ùå Error apostando al n√∫mero {num}")
                
                logger.info(f"‚úÖ Apuesta completada: {len(valid_numbers)} n√∫meros")
                
                # Preguntar si hacer otra apuesta
                return self._ask_for_another_bet()
                
            except KeyboardInterrupt:
                logger.info("‚ùå Apuesta cancelada por el usuario")
                return False
            except Exception as e:
                logger.error(f"‚ùå Error en apuesta m√∫ltiple: {e}")
                return False
        
        else:
            # No hay n√∫meros detectados autom√°ticamente, usar modo manual
            print("‚ö†Ô∏è No se detectaron n√∫meros autom√°ticamente")
            print("üîß MODO MANUAL: Selecciona coordenadas por nombre")
            print("=" * 50)
            
            try:
                positions_input = input("Ingresa los nombres de las coordenadas separados por comas: ").strip()
                
                if not positions_input:
                    logger.warning("‚ùå No se ingresaron nombres")
                    return False
                
                # Procesar nombres
                position_names = [name.strip() for name in positions_input.split(',')]
                valid_positions = []
                missing_positions = []
                
                for name in position_names:
                    if name in self.positions_memory:
                        valid_positions.append((name, self.positions_memory[name]))
                    else:
                        missing_positions.append(name)
                
                if missing_positions:
                    logger.warning(f"‚ö†Ô∏è Coordenadas no encontradas: {', '.join(missing_positions)}")
                
                if not valid_positions:
                    logger.error("‚ùå Ninguna coordenada est√° disponible")
                    return False
                
                # Confirmar apuesta
                print(f"\nüéØ COORDENADAS A USAR:")
                for name, pos in valid_positions:
                    print(f"  ‚Ä¢ {name}: ({pos[0]}, {pos[1]})")
                
                if missing_positions:
                    print(f"‚ö†Ô∏è COORDENADAS OMITIDAS: {', '.join(missing_positions)}")
                
                confirm = input("¬øConfirmar apuesta? (s/N): ").strip().lower()
                if confirm != 's':
                    logger.info("‚ùå Apuesta cancelada")
                    return False
                
                # Realizar apuestas
                logger.info(f"üöÄ Iniciando apuesta a {len(valid_positions)} coordenadas...")
                
                for i, (name, position) in enumerate(valid_positions, 1):
                    logger.info(f"üé≤ [{i}/{len(valid_positions)}] Apostando en {name}")
                    
                    # Realizar click natural
                    if self.perform_natural_click(*position):
                        # Delay entre clicks
                        if i < len(valid_positions):
                            if self.turbo_mode:
                                delay = random.uniform(0.05, 0.15)  # Delay m√≠nimo en turbo
                            else:
                                delay = random.uniform(0.5, 1.5)    # Delay normal
                            time.sleep(delay)
                    else:
                        logger.error(f"‚ùå Error apostando en {name}")
                
                logger.info(f"‚úÖ Apuesta completada: {len(valid_positions)} coordenadas")
                
                # Preguntar si hacer otra apuesta
                return self._ask_for_another_bet()
                
            except KeyboardInterrupt:
                logger.info("‚ùå Apuesta cancelada por el usuario")
                return False
            except Exception as e:
                logger.error(f"‚ùå Error en apuesta manual: {e}")
                return False

    def _ask_for_another_bet(self):
        """Pregunta si hacer otra apuesta inmediatamente"""
        try:
            print("\n" + "="*50)
            print("üé≤ APUESTA COMPLETADA")
            print("="*50)
            print("¬øQu√© quieres hacer ahora?")
            print("1. üîÑ Hacer otra apuesta m√∫ltiple")
            print("2. ‚≠ê Apostar a n√∫meros favoritos")
            print("3. üéØ Apostar a un n√∫mero espec√≠fico")
            print("4. üìã Volver al men√∫ principal")
            print("0. ‚ùå Salir")
            
            choice = input("Selecciona una opci√≥n: ").strip()
            
            if choice == '1':
                # Hacer otra apuesta m√∫ltiple
                return self.bet_multiple_numbers()
            elif choice == '2':
                # Apostar a favoritos
                return self.quick_bet_multiple_from_hotkey()
            elif choice == '3':
                # Apostar a n√∫mero espec√≠fico
                return self._quick_single_bet()
            elif choice == '4':
                # Volver al men√∫
                return True
            elif choice == '0':
                # Salir
                self.exit_requested = True
                return False
            else:
                logger.warning("‚ùå Opci√≥n inv√°lida, volviendo al men√∫")
                return True
                
        except KeyboardInterrupt:
            logger.info("‚ùå Volviendo al men√∫ principal")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return True

    def _quick_single_bet(self):
        """Apuesta r√°pida a un n√∫mero espec√≠fico"""
        try:
            # Mostrar n√∫meros disponibles
            available_numbers = []
            number_positions = {}
            
            for pos_name, pos_coords in self.positions_memory.items():
                if pos_name.startswith("Numero_"):
                    try:
                        num = int(pos_name.split("_")[1])
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
                elif pos_name.isdigit():
                    try:
                        num = int(pos_name)
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
            
            if not available_numbers:
                logger.warning("‚ùå No hay n√∫meros disponibles")
                return self._ask_for_another_bet()
            
            available_numbers.sort()
            print(f"\nüéØ N√∫meros disponibles: {', '.join(map(str, available_numbers))}")
            
            number_input = input("¬øA qu√© n√∫mero apostar?: ").strip()
            number = int(number_input)
            
            if number in number_positions:
                position = number_positions[number]
                logger.info(f"üé≤ Apostando al n√∫mero {number}")
                
                if self.perform_natural_click(*position):
                    logger.info(f"‚úÖ Apuesta al n√∫mero {number} completada")
                else:
                    logger.error(f"‚ùå Error apostando al n√∫mero {number}")
                
                # Preguntar si hacer otra apuesta
                return self._ask_for_another_bet()
            else:
                logger.warning(f"‚ùå N√∫mero {number} no disponible")
                return self._ask_for_another_bet()
                
        except ValueError:
            logger.error("‚ùå N√∫mero inv√°lido")
            return self._ask_for_another_bet()
        except KeyboardInterrupt:
            logger.info("‚ùå Apuesta cancelada")
            return self._ask_for_another_bet()
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return self._ask_for_another_bet()

    def continuous_betting_mode(self):
        """Modo de apuesta continua - m√∫ltiples apuestas seguidas"""
        print("\nüîÑ MODO DE APUESTA CONTINUA")
        print("=" * 50)
        print("Realiza m√∫ltiples apuestas seguidas sin volver al men√∫")
        print("Presiona Ctrl+C en cualquier momento para salir")
        print("=" * 50)
        
        bet_count = 0
        
        try:
            while not self.exit_requested:
                bet_count += 1
                print(f"\nüé≤ APUESTA #{bet_count}")
                print("-" * 30)
                
                # Realizar apuesta
                if not self.bet_multiple_numbers():
                    break
                
                # Peque√±a pausa entre apuestas
                time.sleep(0.5)
                
        except KeyboardInterrupt:
            logger.info(f"\nüîö Modo continuo finalizado. Total de apuestas: {bet_count - 1}")
        except Exception as e:
            logger.error(f"‚ùå Error en modo continuo: {e}")
        
        return True

    def toggle_turbo_mode(self):
        """Activa/desactiva el modo turbo"""
        self.turbo_mode = not self.turbo_mode
        
        if self.turbo_mode:
            logger.info("‚ö° MODO TURBO ACTIVADO - Clicks ultra-r√°pidos")
            logger.info("üöÄ Delays m√≠nimos: 0.05-0.1 segundos entre clicks")
            logger.info("‚ö†Ô∏è Usa Ctrl+Shift+T para desactivar")
        else:
            logger.info("üéØ MODO NORMAL ACTIVADO - Clicks naturales")
            logger.info("üïê Delays normales: 0.2-1.5 segundos entre clicks")
        
        return self.turbo_mode

    def turbo_bet_favorites(self):
        """Apuesta turbo a n√∫meros favoritos - m√°xima velocidad"""
        if not hasattr(self, 'favorites_numbers') or not self.favorites_numbers:
            logger.warning("‚ö†Ô∏è No hay n√∫meros favoritos configurados")
            logger.info("üí° Usa Ctrl+Shift+F para configurar favoritos")
            return False
        
        # Activar modo turbo temporalmente
        original_turbo = self.turbo_mode
        self.turbo_mode = True
        
        try:
            # Buscar posiciones de n√∫meros favoritos
            valid_positions = []
            for num in self.favorites_numbers:
                name = f"Numero_{num:02d}"
                if name in self.positions_memory:
                    valid_positions.append((num, self.positions_memory[name]))
            
            if not valid_positions:
                logger.warning("‚ö†Ô∏è No se encontraron posiciones para n√∫meros favoritos")
                return False
            
            # Realizar apuesta turbo
            logger.info(f"‚ö° APUESTA TURBO FAVORITOS: {', '.join(map(str, self.favorites_numbers))}")
            
            for num, position in valid_positions:
                self.perform_natural_click(*position)
                time.sleep(0.05)  # Delay m√≠nimo entre clicks
            
            logger.info(f"‚úÖ Apuesta turbo completada: {len(valid_positions)} n√∫meros en modo ultra-r√°pido")
            return True
            
        finally:
            # Restaurar modo turbo original
            self.turbo_mode = original_turbo
            
    def ultra_quick_bet(self, numbers_list):
        """Apuesta ultra-r√°pida sin confirmaci√≥n a una lista predefinida"""
        try:
            # Buscar n√∫meros disponibles
            available_numbers = []
            number_positions = {}
            
            for pos_name, pos_coords in self.positions_memory.items():
                if pos_name.startswith("Numero_"):
                    try:
                        num = int(pos_name.split("_")[1])
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
                elif pos_name.isdigit():
                    try:
                        num = int(pos_name)
                        if 0 <= num <= 36:
                            available_numbers.append(num)
                            number_positions[num] = pos_coords
                    except:
                        pass
            
            # Filtrar n√∫meros que est√°n disponibles
            valid_numbers = [num for num in numbers_list if num in number_positions]
            
            if not valid_numbers:
                logger.warning("‚ö†Ô∏è No hay n√∫meros disponibles para apuesta ultra-r√°pida")
                return False
            
            # Realizar apuesta sin confirmaci√≥n
            logger.info(f"‚ö° APUESTA ULTRA-R√ÅPIDA: {', '.join(map(str, valid_numbers))}")
            
            for num in valid_numbers:
                position = number_positions[num]
                self.perform_natural_click(*position)
                
                # Delay entre clicks - m√°s corto en modo turbo
                if self.turbo_mode:
                    time.sleep(random.uniform(0.05, 0.1))  # Delay m√≠nimo en turbo
                else:
                    time.sleep(random.uniform(0.2, 0.5))   # Delay normal
            
            logger.info(f"‚úÖ Apuesta ultra-r√°pida completada: {len(valid_numbers)} n√∫meros")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en apuesta ultra-r√°pida: {e}")
            return False

    def quick_bet_multiple_from_hotkey(self):
        """Versi√≥n r√°pida para hotkey - usa n√∫meros predefinidos"""
        # Buscar si hay n√∫meros favoritos guardados
        favorites_key = "numeros_favoritos"
        
        if hasattr(self, 'favorites_numbers') and self.favorites_numbers:
            numbers_to_bet = self.favorites_numbers
        else:
            # Si no hay favoritos, usar n√∫meros comunes
            common_numbers = [0, 7, 14, 21, 28]  # N√∫meros espaciados en la ruleta
            numbers_to_bet = []
            
            for num in common_numbers:
                name = f"Numero_{num:02d}"
                if name in self.positions_memory:
                    numbers_to_bet.append(num)
            
            if not numbers_to_bet:
                logger.warning("‚ö†Ô∏è No hay n√∫meros grabados para apuesta r√°pida")
                logger.info("üí° Usa Ctrl+Shift+F para configurar n√∫meros favoritos")
                return False
        
        # Realizar apuesta sin confirmaci√≥n
        logger.info(f"üöÄ Apuesta r√°pida: {', '.join(map(str, numbers_to_bet))}")
        
        for num in numbers_to_bet:
            name = f"Numero_{num:02d}"
            if name in self.positions_memory:
                position = self.positions_memory[name]
                self.perform_natural_click(*position)
                
                # Delay entre clicks - ajustado seg√∫n modo
                if self.turbo_mode:
                    time.sleep(random.uniform(0.05, 0.15))  # M√°s r√°pido en turbo
                else:
                    time.sleep(random.uniform(0.3, 0.8))    # Normal
        
        logger.info(f"‚úÖ Apuesta r√°pida completada: {len(numbers_to_bet)} n√∫meros")
        
        # Preguntar si hacer otra apuesta
        return self._ask_for_another_bet()

    def set_favorite_numbers(self):
        """Configura n√∫meros favoritos para apuesta r√°pida"""
        print("\n‚≠ê CONFIGURAR N√öMEROS FAVORITOS")
        print("=" * 40)
        print("Estos n√∫meros se usar√°n para la apuesta r√°pida (Ctrl+Shift+B)")
        print("=" * 40)
        
        try:
            numbers_input = input("Ingresa tus n√∫meros favoritos separados por comas: ").strip()
            
            if not numbers_input:
                logger.info("‚ùå Configuraci√≥n cancelada")
                return False
            
            # Procesar n√∫meros
            try:
                favorite_numbers = []
                for num_str in numbers_input.split(','):
                    num = int(num_str.strip())
                    if 0 <= num <= 36:
                        favorite_numbers.append(num)
                    else:
                        logger.warning(f"‚ö†Ô∏è N√∫mero {num} fuera de rango (0-36)")
                
                if not favorite_numbers:
                    logger.warning("‚ùå No hay n√∫meros v√°lidos")
                    return False
                
                # Guardar n√∫meros favoritos
                self.favorites_numbers = favorite_numbers
                
                # Guardar en configuraci√≥n
                if self.current_profile not in self.game_profiles:
                    self.game_profiles[self.current_profile] = {}
                
                self.game_profiles[self.current_profile]["favorites"] = favorite_numbers
                self.save_config_safe()
                
                logger.info(f"‚≠ê N√∫meros favoritos configurados: {', '.join(map(str, favorite_numbers))}")
                logger.info("üöÄ Usa Ctrl+Shift+B para apuesta r√°pida")
                return True
                
            except ValueError:
                logger.error("‚ùå Formato inv√°lido. Usa n√∫meros separados por comas")
                return False
                
        except KeyboardInterrupt:
            logger.info("‚ùå Configuraci√≥n cancelada")
            return False

    def toggle_clicking(self):
        """Alterna entre iniciar y parar clicks"""
        if self.is_running:
            self.stop_clicking()
        else:
            self.start_clicking()

    def display_menu(self):
        """Muestra el men√∫ principal"""
        print("\n" + "="*60)
        print("üé∞ CASINO BOT - MEN√ö PRINCIPAL")
        print("="*60)
        print(f"üìÅ Perfil actual: {self.current_profile}")
        print(f"üìç Posiciones guardadas: {len(self.positions_memory)}")
        if hasattr(self, 'favorites_numbers') and self.favorites_numbers:
            print(f"‚≠ê N√∫meros favoritos: {', '.join(map(str, self.favorites_numbers))}")
        if self.target_position:
            print(f"üéØ Posici√≥n objetivo: {self.target_position}")
        
        # Mostrar estado del modo turbo
        if self.turbo_mode:
            print("‚ö° MODO TURBO: ACTIVADO (clicks ultra-r√°pidos)")
        else:
            print("üéØ MODO NORMAL: ACTIVADO (clicks naturales)")
            
        print("="*60)

    def create_new_profile(self):
        """Crea un nuevo perfil de juego"""
        print("\nüìÅ CREAR NUEVO PERFIL")
        print("=" * 40)
        
        # Mostrar perfiles existentes
        if self.game_profiles:
            print("Perfiles existentes:")
            for i, profile_name in enumerate(self.game_profiles.keys(), 1):
                print(f"  {i}. {profile_name}")
            print()
        
        try:
            profile_name = input("Nombre del nuevo perfil: ").strip()
            
            if not profile_name:
                logger.warning("‚ùå El nombre no puede estar vac√≠o")
                return False
            
            if profile_name in self.game_profiles:
                logger.warning(f"‚ùå El perfil '{profile_name}' ya existe")
                return False
            
            # Crear nuevo perfil
            self.game_profiles[profile_name] = {"positions": {}}
            
            # Preguntar si cambiar al nuevo perfil
            change = input(f"¬øCambiar al perfil '{profile_name}'? (s/N): ").strip().lower()
            if change == 's':
                self.current_profile = profile_name
                self.positions_memory = {}
            
            self.save_config_safe()
            logger.info(f"‚úÖ Perfil '{profile_name}' creado exitosamente")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error creando perfil: {e}")
            return False

    def switch_profile(self):
        """Cambia entre perfiles existentes"""
        if not self.game_profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return False
        
        print("\nüìÅ CAMBIAR PERFIL")
        print("=" * 40)
        
        profiles_list = list(self.game_profiles.keys())
        for i, profile_name in enumerate(profiles_list, 1):
            marker = "üëâ" if profile_name == self.current_profile else "  "
            positions_count = len(self.game_profiles[profile_name].get("positions", {}))
            print(f"{marker} {i}. {profile_name} ({positions_count} posiciones)")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona un perfil (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(profiles_list):
                selected_profile = profiles_list[index]
                
                if selected_profile == self.current_profile:
                    logger.info(f"‚ÑπÔ∏è Ya est√°s en el perfil '{selected_profile}'")
                    return True
                
                # Cambiar perfil
                self.current_profile = selected_profile
                self.positions_memory = self.game_profiles[selected_profile].get("positions", {})
                self.favorites_numbers = self.game_profiles[selected_profile].get("favorites", [])
                self.target_position = None  # Limpiar posici√≥n objetivo
                
                self.save_config_safe()
                logger.info(f"‚úÖ Cambiado al perfil: {selected_profile}")
                logger.info(f"üìç Posiciones disponibles: {len(self.positions_memory)}")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def rename_profile(self):
        """Renombra un perfil existente"""
        if not self.game_profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return False
        
        print("\nüìù RENOMBRAR PERFIL")
        print("=" * 40)
        
        profiles_list = list(self.game_profiles.keys())
        for i, profile_name in enumerate(profiles_list, 1):
            marker = "üëâ" if profile_name == self.current_profile else "  "
            print(f"{marker} {i}. {profile_name}")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona perfil a renombrar (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(profiles_list):
                old_name = profiles_list[index]
                new_name = input(f"Nuevo nombre para '{old_name}': ").strip()
                
                if not new_name:
                    logger.warning("‚ùå El nombre no puede estar vac√≠o")
                    return False
                
                if new_name in self.game_profiles:
                    logger.warning(f"‚ùå El perfil '{new_name}' ya existe")
                    return False
                
                # Renombrar perfil
                self.game_profiles[new_name] = self.game_profiles.pop(old_name)
                
                # Actualizar perfil actual si es necesario
                if self.current_profile == old_name:
                    self.current_profile = new_name
                
                self.save_config_safe()
                logger.info(f"‚úÖ Perfil renombrado: '{old_name}' ‚Üí '{new_name}'")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def delete_profile(self):
        """Elimina un perfil existente"""
        if not self.game_profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return False
        
        if len(self.game_profiles) == 1:
            logger.warning("‚ùå No puedes eliminar el √∫nico perfil existente")
            return False
        
        print("\nüóëÔ∏è ELIMINAR PERFIL")
        print("=" * 40)
        
        profiles_list = list(self.game_profiles.keys())
        for i, profile_name in enumerate(profiles_list, 1):
            marker = "üëâ" if profile_name == self.current_profile else "  "
            positions_count = len(self.game_profiles[profile_name].get("positions", {}))
            print(f"{marker} {i}. {profile_name} ({positions_count} posiciones)")
        
        print("=" * 40)
        
        try:
            choice = input("Selecciona perfil a eliminar (n√∫mero): ").strip()
            index = int(choice) - 1
            
            if 0 <= index < len(profiles_list):
                profile_to_delete = profiles_list[index]
                
                # Confirmar eliminaci√≥n
                positions_count = len(self.game_profiles[profile_to_delete].get("positions", {}))
                print(f"‚ö†Ô∏è Vas a eliminar '{profile_to_delete}' con {positions_count} posiciones")
                confirm = input("¬øEst√°s seguro? (s/N): ").strip().lower()
                
                if confirm != 's':
                    logger.info("‚ùå Eliminaci√≥n cancelada")
                    return False
                
                # Eliminar perfil
                del self.game_profiles[profile_to_delete]
                
                # Si era el perfil actual, cambiar a otro
                if self.current_profile == profile_to_delete:
                    self.current_profile = list(self.game_profiles.keys())[0]
                    self.positions_memory = self.game_profiles[self.current_profile].get("positions", {})
                    self.target_position = None
                    logger.info(f"üìÅ Cambiado autom√°ticamente al perfil: {self.current_profile}")
                
                self.save_config_safe()
                logger.info(f"‚úÖ Perfil '{profile_to_delete}' eliminado")
                return True
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.warning("‚ùå Entrada inv√°lida")
            return False

    def show_all_profiles(self):
        """Muestra todos los perfiles y sus posiciones"""
        if not self.game_profiles:
            logger.info("üìÅ No hay perfiles disponibles")
            return
        
        print("\nüìÅ TODOS LOS PERFILES:")
        print("=" * 60)
        
        for profile_name, profile_data in self.game_profiles.items():
            marker = "üëâ" if profile_name == self.current_profile else "  "
            positions = profile_data.get("positions", {})
            
            print(f"{marker} üìÅ {profile_name} ({len(positions)} posiciones)")
            
            if positions:
                for pos_name, pos_coords in positions.items():
                    print(f"     üìç {pos_name}: ({pos_coords[0]}, {pos_coords[1]})")
            else:
                print("     (sin posiciones guardadas)")
            print()
        
        print("=" * 60)

    def quick_switch_profile(self, profile_number):
        """Cambio r√°pido a un perfil espec√≠fico por n√∫mero"""
        try:
            profiles_list = list(self.game_profiles.keys())
            
            if 1 <= profile_number <= len(profiles_list):
                target_profile = profiles_list[profile_number - 1]
                
                if target_profile == self.current_profile:
                    logger.info(f"‚ÑπÔ∏è Ya est√°s en el perfil '{target_profile}'")
                    return
                
                # Cambiar perfil
                self.current_profile = target_profile
                self.positions_memory = self.game_profiles[target_profile].get("positions", {})
                self.favorites_numbers = self.game_profiles[target_profile].get("favorites", [])
                self.target_position = None
                
                self.save_config_safe()
                logger.info(f"üöÄ Cambio r√°pido al perfil: {target_profile}")
                logger.info(f"üìç Posiciones disponibles: {len(self.positions_memory)}")
            else:
                logger.warning(f"‚ùå No existe perfil #{profile_number}")
                
        except Exception as e:
            logger.error(f"‚ùå Error en cambio r√°pido de perfil: {e}")

    def map_coordinates_to_numbers(self):
        """Mapea coordenadas existentes a n√∫meros espec√≠ficos"""
        print("\nüîó MAPEAR COORDENADAS A N√öMEROS")
        print("=" * 50)
        print("Asigna n√∫meros (0-36) a tus coordenadas existentes")
        print("=" * 50)
        
        if not self.positions_memory:
            logger.warning("‚ùå No hay coordenadas grabadas en este perfil")
            logger.info("üí° Usa la opci√≥n 1 para grabar coordenadas primero")
            return False
        
        # Mostrar coordenadas disponibles
        print("üìç COORDENADAS DISPONIBLES:")
        print("-" * 30)
        positions_list = list(self.positions_memory.items())
        for i, (name, pos) in enumerate(positions_list, 1):
            print(f"  {i}. {name}: ({pos[0]}, {pos[1]})")
        print("-" * 30)
        
        try:
            print("\nüéØ OPCIONES DE MAPEO:")
            print("1. Mapear coordenada individual")
            print("2. Mapear m√∫ltiples coordenadas")
            print("3. Auto-mapear si los nombres son n√∫meros")
            print("0. Cancelar")
            
            choice = input("Selecciona una opci√≥n: ").strip()
            
            if choice == '1':
                return self._map_single_coordinate(positions_list)
            elif choice == '2':
                return self._map_multiple_coordinates(positions_list)
            elif choice == '3':
                return self._auto_map_coordinates()
            elif choice == '0':
                logger.info("‚ùå Mapeo cancelado")
                return False
            else:
                logger.warning("‚ùå Opci√≥n inv√°lida")
                return False
                
        except KeyboardInterrupt:
            logger.info("‚ùå Mapeo cancelado por el usuario")
            return False
        except Exception as e:
            logger.error(f"‚ùå Error en mapeo: {e}")
            return False

    def _map_single_coordinate(self, positions_list):
        """Mapea una sola coordenada a un n√∫mero"""
        try:
            # Seleccionar coordenada
            coord_choice = input("N√∫mero de coordenada a mapear: ").strip()
            coord_index = int(coord_choice) - 1
            
            if 0 <= coord_index < len(positions_list):
                old_name, position = positions_list[coord_index]
                
                # Solicitar n√∫mero
                number_input = input(f"¬øA qu√© n√∫mero (0-36) mapear '{old_name}'?: ").strip()
                number = int(number_input)
                
                if 0 <= number <= 36:
                    new_name = f"Numero_{number:02d}"
                    
                    # Verificar si ya existe
                    if new_name in self.positions_memory and new_name != old_name:
                        overwrite = input(f"‚ö†Ô∏è '{new_name}' ya existe. ¬øSobrescribir? (s/N): ").strip().lower()
                        if overwrite != 's':
                            logger.info("‚ùå Mapeo cancelado")
                            return False
                    
                    # Realizar mapeo
                    if old_name != new_name:
                        # Eliminar nombre anterior y agregar nuevo
                        del self.positions_memory[old_name]
                        self.positions_memory[new_name] = position
                        self.save_config_safe()
                        
                        logger.info(f"‚úÖ Mapeado: '{old_name}' ‚Üí '{new_name}' (n√∫mero {number})")
                    else:
                        logger.info(f"‚ÑπÔ∏è '{old_name}' ya est√° mapeado correctamente")
                    
                    return True
                else:
                    logger.warning("‚ùå N√∫mero debe estar entre 0 y 36")
                    return False
            else:
                logger.warning("‚ùå Selecci√≥n inv√°lida")
                return False
                
        except ValueError:
            logger.error("‚ùå Entrada inv√°lida")
            return False

    def _map_multiple_coordinates(self, positions_list):
        """Mapea m√∫ltiples coordenadas a n√∫meros"""
        print("\nüîó MAPEO M√öLTIPLE")
        print("Formato: n√∫mero_coordenada:n√∫mero_ruleta")
        print("Ejemplo: 1:0,2:7,3:14 (mapea coord 1 al n√∫mero 0, coord 2 al 7, etc.)")
        print("-" * 50)
        
        try:
            mapping_input = input("Ingresa los mapeos separados por comas: ").strip()
            
            if not mapping_input:
                logger.warning("‚ùå No se ingresaron mapeos")
                return False
            
            mappings = []
            for mapping in mapping_input.split(','):
                if ':' in mapping:
                    coord_num, roulette_num = mapping.strip().split(':')
                    coord_index = int(coord_num) - 1
                    roulette_number = int(roulette_num)
                    
                    if 0 <= coord_index < len(positions_list) and 0 <= roulette_number <= 36:
                        mappings.append((coord_index, roulette_number))
                    else:
                        logger.warning(f"‚ö†Ô∏è Mapeo inv√°lido: {mapping}")
                else:
                    logger.warning(f"‚ö†Ô∏è Formato incorrecto: {mapping}")
            
            if not mappings:
                logger.warning("‚ùå No hay mapeos v√°lidos")
                return False
            
            # Mostrar mapeos a realizar
            print(f"\nüéØ MAPEOS A REALIZAR:")
            for coord_index, roulette_number in mappings:
                old_name = positions_list[coord_index][0]
                new_name = f"Numero_{roulette_number:02d}"
                print(f"  ‚Ä¢ '{old_name}' ‚Üí '{new_name}' (n√∫mero {roulette_number})")
            
            confirm = input("¬øConfirmar mapeos? (s/N): ").strip().lower()
            if confirm != 's':
                logger.info("‚ùå Mapeos cancelados")
                return False
            
            # Realizar mapeos
            for coord_index, roulette_number in mappings:
                old_name, position = positions_list[coord_index]
                new_name = f"Numero_{roulette_number:02d}"
                
                if old_name != new_name:
                    # Eliminar nombre anterior si existe
                    if old_name in self.positions_memory:
                        del self.positions_memory[old_name]
                    # Agregar nuevo nombre
                    self.positions_memory[new_name] = position
            
            self.save_config_safe()
            logger.info(f"‚úÖ Completados {len(mappings)} mapeos")
            return True
            
        except ValueError:
            logger.error("‚ùå Formato inv√°lido")
            return False

    def _auto_map_coordinates(self):
        """Auto-mapea coordenadas que ya tienen nombres num√©ricos"""
        mapped_count = 0
        
        # Buscar coordenadas con nombres num√©ricos
        to_rename = []
        for name, position in self.positions_memory.items():
            if name.isdigit():
                try:
                    number = int(name)
                    if 0 <= number <= 36:
                        new_name = f"Numero_{number:02d}"
                        if new_name != name:
                            to_rename.append((name, new_name, position, number))
                except:
                    pass
        
        if not to_rename:
            logger.info("‚ÑπÔ∏è No se encontraron coordenadas para auto-mapear")
            logger.info("üí° Las coordenadas deben tener nombres num√©ricos (0, 1, 2, etc.)")
            return False
        
        # Mostrar auto-mapeos
        print(f"\nü§ñ AUTO-MAPEOS DETECTADOS:")
        for old_name, new_name, position, number in to_rename:
            print(f"  ‚Ä¢ '{old_name}' ‚Üí '{new_name}'")
        
        confirm = input(f"¬øConfirmar {len(to_rename)} auto-mapeos? (s/N): ").strip().lower()
        if confirm != 's':
            logger.info("‚ùå Auto-mapeo cancelado")
            return False
        
        # Realizar auto-mapeos
        for old_name, new_name, position, number in to_rename:
            del self.positions_memory[old_name]
            self.positions_memory[new_name] = position
            mapped_count += 1
        
        self.save_config_safe()
        logger.info(f"‚úÖ Auto-mapeadas {mapped_count} coordenadas")
        return True

    def run_menu(self):
        """Ejecuta el men√∫ principal"""
        while not self.exit_requested:
            self.display_menu()
            
            print("1. üìç Ubicar manualmente (grabar coordenadas)")
            print("2. üìÇ Usar posici√≥n guardada")
            print("3. üöÄ Iniciar clicks autom√°ticos")
            print("4. ‚èπÔ∏è Detener clicks")
            print("5. üìã Ver posiciones guardadas")
            print("6. üóëÔ∏è Limpiar posiciones del perfil actual")
            print("7. ‚å®Ô∏è Configurar hotkeys")
            print("8. ü¶ä Abrir/reabrir Firefox")
            print("9. üìÅ Crear nuevo perfil")
            print("10. üîÑ Cambiar perfil")
            print("11. üìù Renombrar perfil")
            print("12. üóëÔ∏è Eliminar perfil")
            print("13. üìä Ver todos los perfiles")
            print("14. üé≤ Apostar a m√∫ltiples n√∫meros")
            print("15. ‚≠ê Configurar n√∫meros favoritos")
            print("16. üîó Mapear coordenadas a n√∫meros")
            print("17. üîÑ Modo de apuesta continua")
            print("18. ‚ö° Activar/desactivar modo turbo")
            print("0. ‚ùå Salir")
            print("="*60)
            
            try:
                choice = input("Selecciona una opci√≥n: ").strip()
                
                if choice == '1':
                    self.manual_locate()
                elif choice == '2':
                    self.load_saved_position()
                elif choice == '3':
                    self.start_clicking()
                elif choice == '4':
                    self.stop_clicking()
                elif choice == '5':
                    self.show_saved_positions()
                elif choice == '6':
                    self.clear_positions()
                elif choice == '7':
                    self.setup_hotkeys()
                elif choice == '8':
                    self.setup_firefox()
                elif choice == '9':
                    self.create_new_profile()
                elif choice == '10':
                    self.switch_profile()
                elif choice == '11':
                    self.rename_profile()
                elif choice == '12':
                    self.delete_profile()
                elif choice == '13':
                    self.show_all_positions()
                elif choice == '14':
                    self.bet_multiple_numbers()
                elif choice == '15':
                    self.set_favorite_numbers()
                elif choice == '16':
                    self.map_coordinates_to_numbers()
                elif choice == '17':
                    self.continuous_betting_mode()
                elif choice == '18':
                    self.toggle_turbo_mode()
                elif choice == '0':
                    self.exit_requested = True
                    logger.info("üëã Saliendo del bot...")
                else:
                    logger.warning("‚ùå Opci√≥n inv√°lida")
                    
            except KeyboardInterrupt:
                self.exit_requested = True
                logger.info("üëã Saliendo del bot...")

    def manual_locate(self):
        """Ubicaci√≥n manual de coordenadas"""
        print("\nüìç UBICACI√ìN MANUAL")
        print("Posiciona el cursor sobre el objetivo y presiona Enter...")
        
        try:
            input("Presiona Enter cuando el cursor est√© en posici√≥n: ")
            current_pos = pyautogui.position()
            
            name = input("Nombre para esta posici√≥n (opcional): ").strip()
            if not name:
                name = "Manual"
            
            self.target_position = (current_pos.x, current_pos.y)
            saved_name = self.save_current_position(name)
            
            logger.info(f"‚úÖ Posici√≥n configurada: {self.target_position}")
            
        except KeyboardInterrupt:
            logger.info("‚ùå Ubicaci√≥n manual cancelada")

    def show_saved_positions(self):
        """Muestra las posiciones guardadas"""
        if not self.positions_memory:
            logger.info("üìç No hay posiciones guardadas")
            return
        
        print("\nüìç POSICIONES GUARDADAS:")
        print("=" * 50)
        for name, pos in self.positions_memory.items():
            print(f"  {name}: ({pos[0]}, {pos[1]})")
        print("=" * 50)

    def clear_positions(self):
        """Limpia todas las posiciones guardadas"""
        confirm = input("¬øEst√°s seguro de limpiar todas las posiciones? (s/N): ").strip().lower()
        if confirm == 's':
            self.positions_memory.clear()
            self.save_config_safe()
            logger.info("üóëÔ∏è Todas las posiciones han sido eliminadas")
        else:
            logger.info("‚ùå Operaci√≥n cancelada")

    def run(self):
        """Funci√≥n principal del bot"""
        try:
            logger.info("üé∞ CASINO BOT INICIADO")
            logger.info("=" * 50)
            
            # Configurar hotkeys
            self.setup_hotkeys()
            
            # Buscar ventana de Firefox si est√° disponible
            if WIN32_AVAILABLE:
                self.find_firefox_window()
            
            # Ejecutar men√∫ principal
            self.run_menu()
            
        except KeyboardInterrupt:
            logger.info("üëã Bot detenido por el usuario")
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
        finally:
            self.stop_clicking()
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
            logger.info("üîö Bot finalizado")

if __name__ == "__main__":
    try:
        bot = CasinoBot()
        bot.run()
    except Exception as e:
        print(f"‚ùå Error fatal: {e}")
        input("Presiona Enter para salir...") 