#!/usr/bin/env python3
"""
Scraper Redis Only - Lightning Roulette
Scraper optimizado que guarda datos √∫nicamente en Redis para m√°xima velocidad
"""

import time
import json
import os
import redis
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n
LOGIN_URL = os.getenv("LOGIN_URL", "https://www.iamonstro.com.br/sistema/index.php")
DASHBOARD_URL = os.getenv("DASHBOARD_URL", "https://www.iamonstro.com.br/sistema/dashboard.php?mesa=Lightning%20Roulette")
USERNAME = os.getenv("ROULETTE_USERNAME", "tu_usuario")
PASSWORD = os.getenv("ROULETTE_PASSWORD", "tu_password")
REFRESH_INTERVAL = int(os.getenv("REFRESH_INTERVAL", "8"))

# Configuraci√≥n Redis
REDIS_URL = (
    os.getenv('REDIS_PUBLIC_URL') or
    os.getenv('Connection_redis') or
    os.getenv('REDIS_URL') or
    'redis://default:kuBKgwJxPrMoMOWqpobsGZIcpgnOFwoW@ballast.proxy.rlwy.net:58381'
)

def log_message(message, level="INFO"):
    """Log con timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] [{level}] {message}")

def get_color_for_number(number: int) -> str:
    """Determinar color para n√∫mero de ruleta"""
    if number == 0:
        return 'green'

    red_numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
    return 'red' if number in red_numbers else 'black'

class RedisRouletteScraper:
    """Scraper optimizado que usa √∫nicamente Redis"""

    def __init__(self):
        self.driver = None
        self.redis_client = None
        self.last_number = None
        self.consecutive_errors = 0

        # Inicializar Redis
        self.setup_redis()

    def setup_redis(self):
        """Configurar conexi√≥n Redis"""
        try:
            self.redis_client = redis.from_url(REDIS_URL, decode_responses=True)
            self.redis_client.ping()
            log_message("‚úÖ Conectado a Redis exitosamente")

            # Mostrar estado inicial
            current_count = self.redis_client.llen('roulette:history')
            latest = self.redis_client.get('roulette:latest')
            log_message(f"üìä Estado inicial Redis - N√∫meros en historial: {current_count}, √öltimo: {latest}")

        except Exception as e:
            log_message(f"‚ùå Error conectando a Redis: {e}", "ERROR")
            self.redis_client = None

    def setup_chrome_driver(self):
        """Configurar Chrome driver optimizado"""
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36")

        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

        return driver

    def setup_session(self):
        """Configurar sesi√≥n persistente con login"""
        log_message("üîß Configurando sesi√≥n...")

        try:
            self.driver = self.setup_chrome_driver()

            # Login
            self.driver.get(LOGIN_URL)
            time.sleep(2)

            wait = WebDriverWait(self.driver, 10)
            email_field = wait.until(EC.presence_of_element_located((By.NAME, "email")))
            email_field.clear()
            email_field.send_keys(USERNAME)

            password_field = self.driver.find_element(By.NAME, "senha")
            password_field.clear()
            password_field.send_keys(PASSWORD)
            password_field.send_keys(Keys.RETURN)

            time.sleep(3)

            # Navigate to dashboard
            self.driver.get(DASHBOARD_URL)
            time.sleep(2)

            log_message("‚úÖ Sesi√≥n configurada exitosamente")
            return True

        except Exception as e:
            log_message(f"‚ùå Error configurando sesi√≥n: {e}", "ERROR")
            if self.driver:
                self.driver.quit()
                self.driver = None
            return False

    def extract_numbers(self):
        """Extraer n√∫meros de la tabla"""
        if not self.driver:
            return []

        try:
            self.driver.refresh()
            time.sleep(1.5)

            numbers = self.driver.execute_script("""
            var table = document.querySelector("table");
            if (!table) return [];

            var rows = table.querySelectorAll("tr");
            var numbers = [];

            // Leer desde ABAJO hacia ARRIBA (m√°s reciente al m√°s antiguo)
            for (var i = rows.length - 1; i >= 0; i--) {
                var cells = rows[i].querySelectorAll("td");
                if (cells.length > 0) {
                    var text = cells[0].textContent.trim();
                    if (text && !isNaN(text)) {
                        var num = parseInt(text);
                        if (num >= 0 && num <= 36) {
                            numbers.push(num);
                        }
                    }
                }
            }

            return numbers;
            """)

            if numbers and len(numbers) > 0:
                log_message(f"‚ö° Extra√≠dos {len(numbers)} n√∫meros. M√°s reciente: {numbers[0]}")
                return numbers
            else:
                log_message("‚ö†Ô∏è No se encontraron n√∫meros v√°lidos")
                return []

        except Exception as e:
            log_message(f"‚ùå Error extrayendo n√∫meros: {e}", "ERROR")
            return []

    def save_number_to_redis(self, number: int) -> bool:
        """Guardar n√∫mero individual en Redis (optimizado)"""
        if not self.redis_client:
            log_message("‚ùå Redis no disponible", "ERROR")
            return False

        try:
            color = get_color_for_number(number)
            timestamp = datetime.utcnow().isoformat()

            # Usar pipeline para operaciones at√≥micas
            pipe = self.redis_client.pipeline()

            # 1. A√±adir al historial (m√°s reciente primero)
            pipe.lpush('roulette:history', str(number))

            # 2. Actualizar √∫ltimo n√∫mero
            pipe.set('roulette:latest', str(number))

            # 3. Actualizar contadores de colores
            if color == 'red':
                pipe.incr('roulette:colors:red')
            elif color == 'black':
                pipe.incr('roulette:colors:black')
            else:  # green
                pipe.incr('roulette:colors:green')

            # 4. Actualizar total spins
            pipe.incr('roulette:total_spins')

            # 5. Mantener solo los √∫ltimos 200 n√∫meros
            pipe.ltrim('roulette:history', 0, 199)

            # 6. Actualizar estad√≠sticas
            pipe.hset('roulette:stats', mapping={
                'last_update': timestamp,
                'latest_number': str(number),
                'latest_color': color,
                'scraper_last_save': timestamp
            })

            # 7. Marcar en el log de scraper
            pipe.lpush('scraper:log', f"{timestamp}|{number}|{color}")
            pipe.ltrim('scraper:log', 0, 99)  # Mantener √∫ltimos 100 logs

            # Ejecutar todas las operaciones
            results = pipe.execute()

            log_message(f"üíæ GUARDADO: {number} ({color}) en Redis ‚úÖ")

            # Obtener estad√≠sticas actualizadas
            total_spins = self.redis_client.get('roulette:total_spins')
            history_count = self.redis_client.llen('roulette:history')
            red_count = self.redis_client.get('roulette:colors:red') or 0
            black_count = self.redis_client.get('roulette:colors:black') or 0
            green_count = self.redis_client.get('roulette:colors:green') or 0

            log_message(f"üìä Stats: Total:{total_spins} | Historial:{history_count} | R:{red_count} B:{black_count} G:{green_count}")

            return True

        except Exception as e:
            log_message(f"‚ùå Error guardando en Redis: {e}", "ERROR")
            return False

    def check_redis_health(self):
        """Verificar salud de Redis"""
        try:
            self.redis_client.ping()
            return True
        except:
            log_message("‚ö†Ô∏è Redis no responde, reintentando conexi√≥n...", "WARNING")
            try:
                self.setup_redis()
                return self.redis_client is not None
            except:
                return False

    def run(self):
        """Ejecutar el scraper principal"""
        log_message("üöÄ SCRAPER REDIS-ONLY INICIADO")
        log_message("‚ö° Modo: Ultra r√°pido - Solo Redis")

        if not self.redis_client:
            log_message("‚ùå No se puede continuar sin Redis", "ERROR")
            return

        try:
            # Configurar sesi√≥n inicial
            if not self.setup_session():
                log_message("‚ùå No se pudo configurar la sesi√≥n")
                return

            # Obtener n√∫mero inicial para comparaci√≥n
            initial_numbers = self.extract_numbers()
            if initial_numbers:
                self.last_number = initial_numbers[0]
                log_message(f"üéØ N√∫mero inicial detectado: {self.last_number}")

            # Loop principal
            iteration = 0
            while True:
                try:
                    iteration += 1
                    log_message(f"üîÑ Iteraci√≥n #{iteration} - Verificando nuevos n√∫meros...")

                    # Verificar salud de Redis
                    if not self.check_redis_health():
                        log_message("‚ùå Redis no disponible", "ERROR")
                        time.sleep(30)
                        continue

                    # Extraer n√∫meros
                    numbers = self.extract_numbers()

                    if not numbers:
                        self.consecutive_errors += 1
                        log_message(f"‚ùå Sin n√∫meros. Errores consecutivos: {self.consecutive_errors}")

                        if self.consecutive_errors >= 3:
                            log_message("üîÑ Reconfiguraci√≥n de sesi√≥n por errores...")
                            if self.driver:
                                self.driver.quit()
                            if self.setup_session():
                                self.consecutive_errors = 0
                                log_message("‚úÖ Sesi√≥n reconfigurada")
                            else:
                                log_message("‚ùå Error reconfiguraci√≥n, pausa larga")
                                time.sleep(60)
                        else:
                            time.sleep(REFRESH_INTERVAL)
                        continue

                    # Reset errores consecutivos
                    self.consecutive_errors = 0

                    # Verificar cambios
                    current_number = numbers[0]

                    if current_number == self.last_number:
                        log_message(f"‚è∏Ô∏è Sin cambios (actual: {current_number})")
                        time.sleep(REFRESH_INTERVAL)
                        continue

                    # ¬°NUEVO N√öMERO DETECTADO!
                    log_message(f"üÜï ¬°CAMBIO DETECTADO! {self.last_number} ‚Üí {current_number}")

                    # Guardar SOLO el n√∫mero m√°s reciente
                    save_success = self.save_number_to_redis(current_number)

                    if save_success:
                        self.last_number = current_number
                        log_message(f"‚úÖ N√∫mero {current_number} procesado exitosamente")

                        # Llamar al endpoint del backend para generar predicci√≥n autom√°tica
                        try:
                            import requests
                            backend_url = "http://localhost:5000/api/roulette/numbers"
                            response = requests.post(backend_url,
                                                   json={"number": current_number},
                                                   timeout=5)
                            if response.status_code == 200:
                                log_message("ü§ñ Backend notificado - predicci√≥n autom√°tica generada")
                            else:
                                log_message(f"‚ö†Ô∏è Backend respondi√≥: {response.status_code}")
                        except Exception as backend_error:
                            log_message(f"‚ö†Ô∏è No se pudo notificar al backend: {backend_error}")
                    else:
                        log_message(f"‚ùå Error guardando n√∫mero {current_number}")

                    # Pausa
                    log_message(f"‚è∞ Pausa de {REFRESH_INTERVAL}s...")
                    time.sleep(REFRESH_INTERVAL)

                except KeyboardInterrupt:
                    log_message("üõë Detenido por usuario")
                    break
                except Exception as e:
                    self.consecutive_errors += 1
                    log_message(f"‚ùå Error en iteraci√≥n: {e}", "ERROR")
                    time.sleep(10)

        finally:
            if self.driver:
                self.driver.quit()
            if self.redis_client:
                # Marcar fin del scraper
                try:
                    self.redis_client.hset('scraper:status', mapping={
                        'last_run': datetime.utcnow().isoformat(),
                        'status': 'stopped',
                        'reason': 'normal_shutdown'
                    })
                except:
                    pass
            log_message("üîå Scraper cerrado")

def main():
    """Funci√≥n principal"""
    log_message("=" * 60)
    log_message("üöÄ INICIANDO SCRAPER REDIS-ONLY")
    log_message("‚ö° Velocidad m√°xima - Sin PostgreSQL")
    log_message("=" * 60)

    scraper = RedisRouletteScraper()
    scraper.run()

if __name__ == "__main__":
    main()