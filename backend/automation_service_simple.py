#!/usr/bin/env python3
"""
Servicio de Automatizaci√≥n Simplificado para AI Casino
Versi√≥n que funciona sin dependencias complejas
"""

import os
import sys
import time
import json
import threading
import logging
from datetime import datetime
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleAutomationService:
    """Servicio de automatizaci√≥n simplificado"""
    
    def __init__(self):
        self.is_running = False
        self.monitoring_thread = None
        self.last_known_number = None
        self.last_check_time = datetime.now()
        self.data_dir = Path("data")
        self.data_dir.mkdir(exist_ok=True)
        
        # Configuraci√≥n
        self.check_interval = 5  # segundos
        self.auto_predict = True
        
        # Archivos de datos locales
        self.numbers_file = self.data_dir / "numbers.json"
        self.stats_file = self.data_dir / "automation_stats.json"
        self.logs_file = self.data_dir / "automation_logs.json"
        
        # Inicializar archivos
        self.init_data_files()
        
        logger.info("ü§ñ Servicio de Automatizaci√≥n Simplificado inicializado")
    
    def init_data_files(self):
        """Inicializar archivos de datos"""
        try:
            # Archivo de n√∫meros
            if not self.numbers_file.exists():
                with open(self.numbers_file, 'w') as f:
                    json.dump({"latest": None, "history": []}, f)
            
            # Archivo de estad√≠sticas
            if not self.stats_file.exists():
                with open(self.stats_file, 'w') as f:
                    json.dump({
                        "total_numbers_processed": 0,
                        "last_process_time": None,
                        "predictions_generated": 0,
                        "service_start_time": datetime.now().isoformat()
                    }, f)
            
            # Archivo de logs
            if not self.logs_file.exists():
                with open(self.logs_file, 'w') as f:
                    json.dump([], f)
                    
        except Exception as e:
            logger.error(f"Error inicializando archivos: {e}")
    
    def log_event(self, message, level="INFO"):
        """Log con timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = {
            "timestamp": timestamp,
            "level": level,
            "message": message
        }
        
        print(f"[{timestamp}] [AUTOMATION] [{level}] {message}")
        
        # Guardar en archivo
        try:
            with open(self.logs_file, 'r') as f:
                logs = json.load(f)
            
            logs.append(log_entry)
            logs = logs[-100:]  # Mantener √∫ltimos 100
            
            with open(self.logs_file, 'w') as f:
                json.dump(logs, f, indent=2)
                
        except Exception as e:
            logger.error(f"Error guardando log: {e}")
    
    def check_for_new_numbers(self):
        """Verificar si hay nuevos n√∫meros"""
        try:
            # Leer archivo de n√∫meros
            with open(self.numbers_file, 'r') as f:
                data = json.load(f)
            
            latest_number = data.get("latest")
            
            if latest_number is None:
                return None
            
            # Verificar si es un n√∫mero nuevo
            if str(latest_number) != str(self.last_known_number):
                self.log_event(f"üÜï Nuevo n√∫mero detectado: {self.last_known_number} ‚Üí {latest_number}")
                
                old_number = self.last_known_number
                self.last_known_number = str(latest_number)
                
                return {
                    'number': int(latest_number),
                    'previous_number': int(old_number) if old_number and str(old_number).isdigit() else None,
                    'timestamp': datetime.now().isoformat(),
                    'source': 'file_monitor'
                }
            
            return None
            
        except Exception as e:
            self.log_event(f"‚ùå Error verificando n√∫meros: {e}", "ERROR")
            return None
    
    def process_new_number(self, number_data):
        """Procesar un nuevo n√∫mero detectado"""
        try:
            number = number_data['number']
            self.log_event(f"üîÑ Procesando nuevo n√∫mero: {number}")
            
            # Simular procesamiento de predicciones
            self.log_event(f"üéØ Generando predicci√≥n para n√∫mero {number}")
            
            # Actualizar estad√≠sticas
            self.update_stats(number_data)
            
            # Simular grupos de predicci√≥n
            prediction_groups = self.generate_simple_prediction(number)
            self.log_event(f"üìä Grupos generados: {list(prediction_groups.keys())}")
            
            self.log_event(f"‚úÖ N√∫mero {number} procesado completamente")
            
        except Exception as e:
            self.log_event(f"‚ùå Error procesando n√∫mero: {e}", "ERROR")
    
    def generate_simple_prediction(self, current_number):
        """Generar predicci√≥n simple basada en el n√∫mero actual"""
        try:
            # Leer historial
            with open(self.numbers_file, 'r') as f:
                data = json.load(f)
            
            history = data.get("history", [])
            
            # An√°lisis simple de patrones
            red_numbers = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
            
            # Generar grupos de predicci√≥n
            groups = {
                "high_low": list(range(19, 37)) if current_number <= 18 else list(range(1, 19)),
                "even_odd": [n for n in range(1, 37) if n % 2 == 0] if current_number % 2 == 1 else [n for n in range(1, 37) if n % 2 == 1],
                "red_black": list(red_numbers) if current_number not in red_numbers else [n for n in range(1, 37) if n not in red_numbers],
                "dozen": []
            }
            
            # Docena opuesta
            if 1 <= current_number <= 12:
                groups["dozen"] = list(range(13, 25))
            elif 13 <= current_number <= 24:
                groups["dozen"] = list(range(25, 37))
            else:
                groups["dozen"] = list(range(1, 13))
            
            return groups
            
        except Exception as e:
            self.log_event(f"Error generando predicci√≥n: {e}", "ERROR")
            return {}
    
    def update_stats(self, number_data):
        """Actualizar estad√≠sticas"""
        try:
            with open(self.stats_file, 'r') as f:
                stats = json.load(f)
            
            stats["total_numbers_processed"] = stats.get("total_numbers_processed", 0) + 1
            stats["last_process_time"] = datetime.now().isoformat()
            stats["last_number"] = number_data["number"]
            stats["predictions_generated"] = stats.get("predictions_generated", 0) + 1
            
            with open(self.stats_file, 'w') as f:
                json.dump(stats, f, indent=2)
                
        except Exception as e:
            self.log_event(f"Error actualizando estad√≠sticas: {e}", "ERROR")
    
    def add_test_number(self, number):
        """Agregar n√∫mero de prueba (para testing)"""
        try:
            with open(self.numbers_file, 'r') as f:
                data = json.load(f)
            
            data["latest"] = number
            data["history"].append({
                "number": number,
                "timestamp": datetime.now().isoformat()
            })
            
            # Mantener √∫ltimos 100 n√∫meros
            data["history"] = data["history"][-100:]
            
            with open(self.numbers_file, 'w') as f:
                json.dump(data, f, indent=2)
            
            self.log_event(f"üìù N√∫mero de prueba agregado: {number}")
            
        except Exception as e:
            self.log_event(f"Error agregando n√∫mero de prueba: {e}", "ERROR")
    
    def monitoring_loop(self):
        """Loop principal de monitoreo"""
        self.log_event("üîç Iniciando loop de monitoreo")
        
        while self.is_running:
            try:
                # Verificar nuevos n√∫meros
                new_number_data = self.check_for_new_numbers()
                
                if new_number_data:
                    self.process_new_number(new_number_data)
                
                # Pausa antes del siguiente check
                time.sleep(self.check_interval)
                
            except Exception as e:
                self.log_event(f"‚ùå Error en loop de monitoreo: {e}", "ERROR")
                time.sleep(self.check_interval * 2)
    
    def start(self):
        """Iniciar el servicio"""
        if self.is_running:
            self.log_event("‚ö†Ô∏è El servicio ya est√° ejecut√°ndose")
            return
        
        self.log_event("üöÄ INICIANDO SERVICIO DE AUTOMATIZACI√ìN SIMPLIFICADO")
        self.log_event("=" * 60)
        
        self.is_running = True
        
        # Obtener n√∫mero inicial
        try:
            with open(self.numbers_file, 'r') as f:
                data = json.load(f)
            
            initial_number = data.get("latest")
            if initial_number:
                self.last_known_number = str(initial_number)
                self.log_event(f"üìç N√∫mero inicial: {self.last_known_number}")
        except Exception as e:
            self.log_event(f"Error obteniendo n√∫mero inicial: {e}", "ERROR")
        
        # Iniciar thread de monitoreo
        self.monitoring_thread = threading.Thread(target=self.monitoring_loop, daemon=True)
        self.monitoring_thread.start()
        
        self.log_event("‚úÖ Servicio iniciado exitosamente")
        self.log_event(f"   ‚Ä¢ Intervalo de verificaci√≥n: {self.check_interval}s")
        self.log_event(f"   ‚Ä¢ Predicciones autom√°ticas: {'‚úÖ' if self.auto_predict else '‚ùå'}")
        self.log_event(f"   ‚Ä¢ Directorio de datos: {self.data_dir}")
    
    def stop(self):
        """Detener el servicio"""
        self.log_event("üõë Deteniendo servicio...")
        
        self.is_running = False
        
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.monitoring_thread.join(timeout=5)
        
        self.log_event("‚úÖ Servicio detenido")
    
    def get_status(self):
        """Obtener estado actual"""
        try:
            # Leer estad√≠sticas
            stats = {}
            if self.stats_file.exists():
                with open(self.stats_file, 'r') as f:
                    stats = json.load(f)
            
            return {
                'is_running': self.is_running,
                'auto_predict': self.auto_predict,
                'check_interval': self.check_interval,
                'last_known_number': self.last_known_number,
                'monitoring_active': self.monitoring_thread.is_alive() if self.monitoring_thread else False,
                'stats': stats,
                'last_check': self.last_check_time.isoformat(),
                'data_directory': str(self.data_dir)
            }
            
        except Exception as e:
            self.log_event(f"‚ùå Error obteniendo status: {e}", "ERROR")
            return {'error': str(e)}
    
    def get_logs(self, limit=50):
        """Obtener logs recientes"""
        try:
            if self.logs_file.exists():
                with open(self.logs_file, 'r') as f:
                    logs = json.load(f)
                return logs[-limit:]
            return []
        except Exception as e:
            return [{"error": f"Error obteniendo logs: {e}"}]

# Instancia global
simple_automation_service = None

def get_simple_automation_service():
    """Obtener instancia del servicio simplificado"""
    global simple_automation_service
    if simple_automation_service is None:
        simple_automation_service = SimpleAutomationService()
    return simple_automation_service

if __name__ == "__main__":
    print("ü§ñ Iniciando Servicio de Automatizaci√≥n Simplificado")
    
    service = SimpleAutomationService()
    
    try:
        service.start()
        
        # Agregar algunos n√∫meros de prueba despu√©s de 5 segundos
        time.sleep(5)
        service.add_test_number(17)
        
        time.sleep(3)
        service.add_test_number(23)
        
        # Mantener ejecut√°ndose
        while True:
            time.sleep(30)
            
    except KeyboardInterrupt:
        print("\nüõë Deteniendo servicio...")
        service.stop()
        print("‚úÖ Servicio detenido")