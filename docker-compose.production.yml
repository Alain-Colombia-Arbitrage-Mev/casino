version: '3.8'

services:
  redis:
    image: redis:7.2-alpine
    container_name: aicasino-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-aiCasino2024!} --maxmemory ${REDIS_MAXMEMORY:-1gb} --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru} --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - aicasino-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile.production
    container_name: aicasino-scraper
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-aiCasino2024!}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SCRAPER_INTERVAL=${SCRAPER_INTERVAL:-5}
      - HEADLESS=${HEADLESS:-true}
    volumes:
      - ./logs/scraper:/app/logs
      - ./scraper/screenshots:/app/screenshots
    networks:
      - aicasino-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', password='${REDIS_PASSWORD:-aiCasino2024!}'); r.ping()"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: aicasino-backend
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-aiCasino2024!}
      - PORT=8080
      - GIN_MODE=release
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs/backend:/app/logs
    ports:
      - "8080:8080"
    networks:
      - aicasino-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  python-ml:
    build:
      context: ./backend
      dockerfile: Dockerfile.python.production
    container_name: aicasino-python-ml
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-aiCasino2024!}
      - PORT=5001
      - FLASK_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./ml_models:/app/models
      - ./logs/python-ml:/app/logs
    ports:
      - "5001:5001"
    networks:
      - aicasino-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: aicasino-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      python-ml:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_API_BASE_URL=${DOMAIN_URL:-http://localhost:8080}
      - NUXT_PUBLIC_PYTHON_ML_URL=${PYTHON_ML_URL:-http://localhost:5001}
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
    volumes:
      - ./logs/frontend:/app/logs
    ports:
      - "3000:3000"
    networks:
      - aicasino-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: aicasino-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
      - python-ml
    networks:
      - aicasino-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_data:
    driver: local
  ssl_certs:
    driver: local

networks:
  aicasino-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16